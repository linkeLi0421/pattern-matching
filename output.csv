File Path,Function Name,Unprotected Accesses
https://elixir.bootlin.com/linux/v6.6/source/virt/kvm/kvm_main.c,"void kvm_vcpu_kick(struct kvm_vcpu *vcpu)
{",vcpu->mode
https://elixir.bootlin.com/linux/v6.6/source/virt/kvm/coalesced_mmio.c,"int coalesced_mmio_write(struct kvm_vcpu *vcpu,
				struct kvm_io_device *this, gpa_t addr,
				int len, const void *val)
{",ring->last
https://elixir.bootlin.com/linux/v6.6/source/kernel/exit.c,"void mm_update_next_owner(struct mm_struct *mm)
{",mm->owner
https://elixir.bootlin.com/linux/v6.6/source/kernel/context_tracking.c,"noinstr ct_kernel_exit(bool user, int offset)
{",ct->dynticks_nesting
https://elixir.bootlin.com/linux/v6.6/source/kernel/context_tracking.c,"noinstr ct_kernel_enter(bool user, int offset)
{",ct->dynticks_nesting
https://elixir.bootlin.com/linux/v6.6/source/kernel/workqueue.c,"void __flush_workqueue(struct workqueue_struct *wq)
{","wq->first_flusher,wq->first_flusher,wq->first_flusher,wq->first_flusher,wq->first_flusher,wq->first_flusher"
https://elixir.bootlin.com/linux/v6.6/source/kernel/workqueue.c,"void rebind_workers(struct worker_pool *pool)
{",worker->flags
https://elixir.bootlin.com/linux/v6.6/source/kernel/fork.c,"void mm_clear_owner(struct mm_struct *mm,
					   struct task_struct *p)
{",mm->owner
https://elixir.bootlin.com/linux/v6.6/source/kernel/tracepoint.c,"void debug_print_probes(struct tracepoint_func *funcs)
{","old[i].func,old[i].func,old[i].func,old[i].func,old[i].func"
https://elixir.bootlin.com/linux/v6.6/source/kernel/events/core.c,"void event_function_call(struct perf_event *event, event_f func, void *data)
{",ctx->task
https://elixir.bootlin.com/linux/v6.6/source/kernel/events/core.c,"void event_function_local(struct perf_event *event, event_f func, void *data)
{",ctx->task
https://elixir.bootlin.com/linux/v6.6/source/kernel/events/core.c,"void
perf_event_set_state(struct perf_event *event, enum perf_event_state state)
{","event->state,event->state"
https://elixir.bootlin.com/linux/v6.6/source/kernel/events/core.c,"void perf_cgroup_switch(struct task_struct *task)
{",cpuctx->cgrp
https://elixir.bootlin.com/linux/v6.6/source/kernel/events/core.c,"void update_cgrp_time_from_event(struct perf_event *event)
{","cpuctx->cgrp,cpuctx->cgrp,cpuctx->cgrp"
https://elixir.bootlin.com/linux/v6.6/source/kernel/events/core.c,"void
perf_cgroup_set_timestamp(struct perf_cpu_context *cpuctx)
{","cpuctx->cgrp,cpuctx->cgrp,cpuctx->cgrp"
https://elixir.bootlin.com/linux/v6.6/source/kernel/events/core.c,"u64 perf_cgroup_event_time_now(struct perf_event *event, u64 now)
{",cpuctx->cgrp
https://elixir.bootlin.com/linux/v6.6/source/kernel/events/core.c,"void perf_cgroup_switch(struct task_struct *task)
{","cpuctx->cgrp,cpuctx->cgrp,cpuctx->cgrp"
https://elixir.bootlin.com/linux/v6.6/source/kernel/events/core.c,"void put_ctx(struct perf_event_context *ctx)
{",event->ctx
https://elixir.bootlin.com/linux/v6.6/source/kernel/events/core.c,"int
event_sched_in(struct perf_event *event, struct perf_event_context *ctx)
{",event->oncpu
https://elixir.bootlin.com/linux/v6.6/source/kernel/events/core.c,"void
perf_install_in_context(struct perf_event_context *ctx,
			struct perf_event *event,
			int cpu)
{","ctx->task,ctx->task"
https://elixir.bootlin.com/linux/v6.6/source/kernel/events/core.c,"int perf_event_read(struct perf_event *event, bool group)
{",event->state
https://elixir.bootlin.com/linux/v6.6/source/kernel/events/core.c,"void perf_remove_from_owner(struct perf_event *event)
{","event->owner,event->owner"
https://elixir.bootlin.com/linux/v6.6/source/kernel/events/core.c,"void perf_event_free_filter(struct perf_event *event)
{","event->prog,event->prog,event->prog"
https://elixir.bootlin.com/linux/v6.6/source/kernel/events/uprobes.c,"int xol_add_vma(struct mm_struct *mm, struct xol_area *area)
{","mm->uprobes_state.xol_area,mm->uprobes_state.xol_area"
https://elixir.bootlin.com/linux/v6.6/source/kernel/kcsan/kcsan_test.c,"void probe_console(void *ignore, const char *buf, size_t len)
{",observed.nlines
https://elixir.bootlin.com/linux/v6.6/source/kernel/kcsan/kcsan_test.c,"void test_kernel_change_bits(void)
{",test_var
https://elixir.bootlin.com/linux/v6.6/source/kernel/kcsan/kcsan_test.c,"void test_write_write_assume_atomic(struct kunit *test)
{","test_var,test_var,test_var,test_var"
https://elixir.bootlin.com/linux/v6.6/source/kernel/bpf/core.c,"void bpf_prog_array_delete_safe(struct bpf_prog_array *array,
				struct bpf_prog *old_prog)
{","item->prog,item->prog"
https://elixir.bootlin.com/linux/v6.6/source/kernel/bpf/core.c,"int bpf_prog_array_update_at(struct bpf_prog_array *array, int index,
			     struct bpf_prog *prog)
{","item->prog,item->prog"
https://elixir.bootlin.com/linux/v6.6/source/kernel/bpf/helpers.c,"void bpf_timer_cancel_and_free(void *val)
{","timer->timer,timer->timer"
https://elixir.bootlin.com/linux/v6.6/source/kernel/bpf/bpf_lru_list.c,"void bpf_common_lru_push_free(struct bpf_lru *lru,
				     struct bpf_lru_node *node)
{","node->type,node->type"
https://elixir.bootlin.com/linux/v6.6/source/kernel/bpf/percpu_freelist.c,"void pcpu_freelist_push_node(struct pcpu_freelist_head *head,
					   struct pcpu_freelist_node *node)
{",head->first
https://elixir.bootlin.com/linux/v6.6/source/kernel/bpf/percpu_freelist.c,"void pcpu_freelist_populate(struct pcpu_freelist *s, void *buf, u32 elem_size,
			    u32 nr_elems)
{","head->first,head->first,s->extralist.first,s->extralist.first"
https://elixir.bootlin.com/linux/v6.6/source/kernel/bpf/net_namespace.c,"int netns_bpf_prog_attach(const union bpf_attr *attr, struct bpf_prog *prog)
{",run_array->items[0].prog
https://elixir.bootlin.com/linux/v6.6/source/kernel/trace/trace_clock.c,"notrace trace_clock_global(void)
{",trace_clock_struct.prev_time
https://elixir.bootlin.com/linux/v6.6/source/kernel/trace/trace_stack.c,"void check_stack(unsigned long ip, unsigned long *stack)
{","tracer_frame,tracer_frame,tracer_frame,tracer_frame"
https://elixir.bootlin.com/linux/v6.6/source/kernel/trace/rethook.c,"void rethook_free(struct rethook *rh)
{",rh->handler
https://elixir.bootlin.com/linux/v6.6/source/kernel/trace/tracing_map.c,"bool keys_match(void *key, void *test_key, unsigned key_size)
{","entry->val,entry->val"
https://elixir.bootlin.com/linux/v6.6/source/kernel/trace/trace.c,"ssize_t
tracing_buffers_splice_read(struct file *file, loff_t *ppos,
			    struct pipe_inode_info *pipe, size_t len,
			    unsigned int flags)
{",iter->wait_index
https://elixir.bootlin.com/linux/v6.6/source/kernel/trace/ring_buffer_benchmark.c,"void ring_buffer_consumer(void)
{","reader_finish,reader_finish"
https://elixir.bootlin.com/linux/v6.6/source/kernel/trace/ring_buffer.c,"int ring_buffer_wait(struct trace_buffer *buffer, int cpu, int full)
{",work->wait_index
https://elixir.bootlin.com/linux/v6.6/source/kernel/trace/ring_buffer.c,"void
rb_set_commit_to_write(struct ring_buffer_per_cpu *cpu_buffer)
{",cpu_buffer->tail_page
https://elixir.bootlin.com/linux/v6.6/source/kernel/trace/ring_buffer.c,"void check_buffer(struct ring_buffer_per_cpu *cpu_buffer,
			 struct rb_event_info *info,
			 unsigned long tail)
{","cpu_buffer->buffer,cpu_buffer->buffer,cpu_buffer->buffer"
https://elixir.bootlin.com/linux/v6.6/source/kernel/trace/ring_buffer.c,"int ring_buffer_iter_empty(struct ring_buffer_iter *iter)
{",cpu_buffer->commit_page
https://elixir.bootlin.com/linux/v6.6/source/kernel/time/timer.c,"void forward_timer_base(struct timer_base *base)
{",timer->flags
https://elixir.bootlin.com/linux/v6.6/source/kernel/time/timer.c,"int
__mod_timer(struct timer_list *timer, unsigned long expires, unsigned int options)
{","timer->flags,timer->flags"
https://elixir.bootlin.com/linux/v6.6/source/kernel/time/timer.c,"void add_timer_on(struct timer_list *timer, int cpu)
{","timer->flags,timer->flags"
https://elixir.bootlin.com/linux/v6.6/source/kernel/time/tick-sched.c,"void tick_sched_do_timer(struct tick_sched *ts, ktime_t now)
{",jiffies
https://elixir.bootlin.com/linux/v6.6/source/kernel/time/hrtimer.c,"bool is_migration_base(struct hrtimer_clock_base *base)
{","timer->base,timer->base"
https://elixir.bootlin.com/linux/v6.6/source/kernel/time/hrtimer.c,"bool is_migration_base(struct hrtimer_clock_base *base)
{","timer->base,timer->base,timer->base"
https://elixir.bootlin.com/linux/v6.6/source/kernel/time/hrtimer.c,"void __remove_hrtimer(struct hrtimer *timer,
			     struct hrtimer_clock_base *base,
			     u8 newstate, int reprogram)
{",timer->state
https://elixir.bootlin.com/linux/v6.6/source/kernel/futex/core.c,"int get_futex_key(u32 __user *uaddr, bool fshared, union futex_key *key,
		  enum futex_access rw)
{",page->mapping
https://elixir.bootlin.com/linux/v6.6/source/kernel/futex/core.c,"int futex_unqueue(struct futex_q *q)
{",q->lock_ptr
https://elixir.bootlin.com/linux/v6.6/source/kernel/printk/printk.c,"ssize_t info_print_ext_header(char *buf, size_t size,
				     struct printk_info *info)
{","console_waiter,console_owner,console_owner"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"void __rcu_irq_enter_check_tick(void)
{",rdp->rcu_forced_tick
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"void rcu_disable_urgency_upon_qs(struct rcu_data *rdp)
{",rdp->rcu_forced_tick
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"int rcu_implicit_dynticks_qs(struct rcu_data *rdp)
{",rdp->rcu_urgent_qs
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"bool rcu_start_this_gp(struct rcu_node *rnp_start, struct rcu_data *rdp,
			      unsigned long gp_seq_req)
{","rnp->gp_seq_needed,rnp->gp_seq_needed"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"bool __note_gp_changes(struct rcu_node *rnp, struct rcu_data *rdp)
{","rdp->gpwrap,rdp->gp_seq_needed"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"bool rcu_gp_init(void)
{","rnp->gp_seq,rnp->gp_seq"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"void rcu_gp_fqs_loop(void)
{","rcu_state.jiffies_force_qs,rcu_state.jiffies_force_qs,rcu_state.jiffies_force_qs,rcu_state.jiffies_force_qs"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"void rcu_gp_cleanup(void)
{",rnp->gp_seq
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"__noreturn rcu_gp_kthread(void *unused)
{","rnp->qsmask,rnp->qsmask,rnp->qsmask,rnp->qsmask"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"void rcu_do_batch(struct rcu_data *rdp)
{",rhp->func
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"void
__call_rcu_common(struct rcu_head *head, rcu_callback_t func, bool lazy_in)
{",head->func
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"void
krc_this_cpu_unlock(struct kfree_rcu_cpu *krcp, unsigned long flags)
{",krcp->nr_bkv_objs
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"bool
put_cached_bnode(struct kfree_rcu_cpu *krcp,
	struct kvfree_rcu_bulk_data *bnode)
{",krcp->nr_bkv_objs
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"void
kvfree_rcu_drain_ready(struct kfree_rcu_cpu *krcp)
{","krcp->head,krcp->head"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"void kfree_rcu_monitor(struct work_struct *work)
{",krcp->head
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"void kvfree_call_rcu(struct rcu_head *head, void *ptr)
{",krcp->head
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"void rcu_barrier_entrain(struct rcu_data *rdp)
{",rdp->barrier_seq_snap
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tree.c,"void rcu_barrier(void)
{",rdp->barrier_seq_snap
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/srcutree.c,"int init_srcu_struct_fields(struct srcu_struct *ssp, bool is_static)
{",ssp->srcu_sup->srcu_size_state
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/srcutree.c,"void cleanup_srcu_struct(struct srcu_struct *ssp)
{","sup->srcu_gp_seq,sup->srcu_gp_seq"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/srcutree.c,"void srcu_gp_end(struct srcu_struct *ssp)
{","snp->srcu_gp_seq_needed_exp,sup->srcu_gp_seq_needed_exp,sup->srcu_gp_seq,sup->srcu_gp_seq,sup->srcu_gp_seq,sup->srcu_gp_seq"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/srcutree.c,"void srcu_funnel_exp_start(struct srcu_struct *ssp, struct srcu_node *snp,
				  unsigned long s)
{","snp->srcu_gp_seq_needed_exp,ssp->srcu_sup->srcu_gp_seq_needed_exp"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/srcutree.c,"void srcu_funnel_gp_start(struct srcu_struct *ssp, struct srcu_data *sdp,
				 unsigned long s, bool do_norm)
{","snp->srcu_gp_seq_needed_exp,sup->srcu_gp_seq_needed_exp"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/srcutree.c,"void __call_srcu(struct srcu_struct *ssp, struct rcu_head *rhp,
			rcu_callback_t func, bool do_norm)
{",rhp->func
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/srcutree.c,"void srcu_advance_state(struct srcu_struct *ssp)
{","ssp->srcu_sup->srcu_gp_seq,ssp->srcu_sup->srcu_gp_seq"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcutorture.c,"bool
rcu_torture_pipe_update_one(struct rcu_torture *rp)
{",rp->rtort_pipe_count
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcutorture.c,"bool rcu_torture_boost_failed(unsigned long gp_state, unsigned long *start)
{",last_persist
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcutorture.c,"int rcu_torture_boost(void *arg)
{",boost_starttime
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcutorture.c,"int
rcu_torture_writer(void *arg)
{",old_rp->rtort_pipe_count
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcutorture.c,"void rcu_torture_reader_do_mbchk(long myid, struct rcu_torture *rtp,
					struct torture_random_state *trsp)
{",rtrcp->rtc_assigner
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcutorture.c,"void rcu_torture_fwd_prog_nr(struct rcu_fwd *rfp,
				    int *tested, int *tested_tries)
{",rfp->rcu_fwd_startat
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcutorture.c,"void rcu_torture_fwd_prog_cr(struct rcu_fwd *rfp)
{","rfp->rcu_fwd_cb_head,rfp->rcu_fwd_startat,rfp->rcu_fwd_startat,rfp->n_launders_cb"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcutorture.c,"int rcu_torture_read_exit(void *unused)
{",read_exit_child_stop
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcutorture.c,"void rcu_torture_read_exit_cleanup(void)
{",read_exit_child_stop
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/sync.c,"void rcu_sync_func(struct rcu_head *rhp)
{",rsp->gp_state
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/sync.c,"void rcu_sync_enter(struct rcu_sync *rsp)
{",rsp->gp_state
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/sync.c,"void rcu_sync_exit(struct rcu_sync *rsp)
{","rsp->gp_count,rsp->gp_state,rsp->gp_state"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/sync.c,"void rcu_sync_dtor(struct rcu_sync *rsp)
{","rsp->gp_state,rsp->gp_state"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/refscale.c,"int
ref_scale_reader(void *arg)
{",rt->start_reader
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tiny.c,"bool rcu_reclaim_tiny(struct rcu_head *head)
{","head->func,head->func"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/tiny.c,"void call_rcu(struct rcu_head *head, rcu_callback_t func)
{","head->func,head->func"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcu_segcblist.c,"void rcu_cblist_flush_enqueue(struct rcu_cblist *drclp,
			      struct rcu_cblist *srclp,
			      struct rcu_head *rhp)
{",srclp->len
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcu_segcblist.c,"void rcu_segcblist_set_len(struct rcu_segcblist *rsclp, long v)
{",rsclp->len
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcu_segcblist.c,"void rcu_segcblist_add_len(struct rcu_segcblist *rsclp, long v)
{",rsclp->len
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcu_segcblist.c,"bool rcu_segcblist_entrain(struct rcu_segcblist *rsclp,
			   struct rcu_head *rhp)
{",rsclp->tails[i]
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcu_segcblist.c,"void rcu_segcblist_extract_done_cbs(struct rcu_segcblist *rsclp,
				    struct rcu_cblist *rclp)
{",rsclp->tails[i]
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcu_segcblist.c,"void rcu_segcblist_insert_done_cbs(struct rcu_segcblist *rsclp,
				   struct rcu_cblist *rclp)
{","rsclp->tails[i],rsclp->head"
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcu_segcblist.c,"void rcu_segcblist_advance(struct rcu_segcblist *rsclp, unsigned long seq)
{",rsclp->tails[j]
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/rcu_segcblist.c,"bool rcu_segcblist_accelerate(struct rcu_segcblist *rsclp, unsigned long seq)
{",rsclp->tails[i]
https://elixir.bootlin.com/linux/v6.6/source/kernel/rcu/srcutiny.c,"void srcu_drive_gp(struct work_struct *wp)
{","ssp->srcu_idx,ssp->srcu_idx,ssp->srcu_idx,ssp->srcu_gp_running"
https://elixir.bootlin.com/linux/v6.6/source/kernel/locking/lockdep.c,"int add_chain_cache(struct task_struct *curr,
				  struct held_lock *hlock,
				  u64 chain_key)
{",chain->chain_key
https://elixir.bootlin.com/linux/v6.6/source/kernel/locking/lockdep.c,"void zap_class(struct pending_free *pf, struct lock_class *class)
{",class->name
https://elixir.bootlin.com/linux/v6.6/source/kernel/locking/qspinlock.c,"__lockfunc queued_spin_lock_slowpath(struct qspinlock *lock, u32 val)
{","node->next,node->next"
https://elixir.bootlin.com/linux/v6.6/source/kernel/locking/osq_lock.c,"bool osq_lock(struct optimistic_spin_queue *lock)
{","prev->next,node->prev,node->prev"
https://elixir.bootlin.com/linux/v6.6/source/kernel/locking/spinlock_debug.c,"void debug_spin_unlock(raw_spinlock_t *lock)
{","lock->owner,lock->owner_cpu"
https://elixir.bootlin.com/linux/v6.6/source/kernel/locking/spinlock_debug.c,"void debug_write_unlock(rwlock_t *lock)
{","lock->owner,lock->owner_cpu"
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/idle.c,"void play_idle_precise(u64 duration_ns, u64 latency_ns)
{",it.done
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/completion.c,"bool try_wait_for_completion(struct completion *x)
{","x->done,x->done,x->done"
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/core.c,"bool set_nr_if_polling(struct task_struct *p)
{",ti->flags
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/core.c,"bool set_nr_if_polling(struct task_struct *p)
{",ti->flags
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/core.c,"bool cookie_match(struct task_struct *a, struct task_struct *b)
{","rq->core_sched_seq,rq->core_sched_seq"
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/core.c,"void sched_mm_cid_remote_clear_old(struct mm_struct *mm, int cpu)
{",pcpu_cid->time
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/membarrier.c,"int membarrier_global_expedited(void)
{",cpu_rq(cpu
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/fair.c,"void task_numa_work(struct callback_head *work)
{",vma->numab_state->access_pids[1]
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/fair.c,"void account_numa_dequeue(struct rq *rq, struct task_struct *p)
{","sched_max_numa_distance,sched_max_numa_distance,vma->numab_state->access_pids[1],vma->numab_state->access_pids[1]"
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/fair.c,"void update_tg_load_avg(struct cfs_rq *cfs_rq)
{","sched_max_numa_distance,sched_max_numa_distance,vma->numab_state->access_pids[1],vma->numab_state->access_pids[1],sysctl_numa_balancing_scan_size,sysctl_numa_balancing_scan_size,sysctl_numa_balancing_scan_size"
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/fair.c,"void util_est_enqueue(struct cfs_rq *cfs_rq,
				    struct task_struct *p)
{",cfs_rq->avg.util_est.enqueued
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/fair.c,"void util_est_dequeue(struct cfs_rq *cfs_rq,
				    struct task_struct *p)
{",cfs_rq->avg.util_est.enqueued
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/fair.c,"void util_est_update(struct cfs_rq *cfs_rq,
				   struct task_struct *p,
				   bool task_sleep)
{",p->se.avg.util_est
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/fair.c,"bool cfs_rq_is_decayed(struct cfs_rq *cfs_rq)
{","p->se.avg.util_est,cfs_rq->avg.util_est.enqueued,cfs_rq->avg.util_est.enqueued"
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/fair.c,"void update_idle_cpu_scan(struct lb_env *env,
				 unsigned long sum_util)
{",sd_share->nr_idle_scan
https://elixir.bootlin.com/linux/v6.6/source/kernel/sched/loadavg.c,"void calc_load_nohz_stop(void)
{","calc_load_update,calc_load_update,calc_load_update,calc_load_update"
https://elixir.bootlin.com/linux/v6.6/source/security/apparmor/apparmorfs.c,"ssize_t ns_revision_read(struct file *file, char __user *buf,
				size_t size, loff_t *ppos)
{","rev->ns->revision,rev->ns->revision"
https://elixir.bootlin.com/linux/v6.6/source/security/keys/keyring.c,"bool search_nested_keyrings(struct key *keyring,
				   struct keyring_search_context *ctx)
{","node->back_pointer,node->back_pointer"
https://elixir.bootlin.com/linux/v6.6/source/block/blk-iolatency.c,"void iolatency_check_latencies(struct iolatency_grp *iolat, u64 now)
{","lat_info->scale_lat,lat_info->scale_lat,lat_info->scale_lat"
https://elixir.bootlin.com/linux/v6.6/source/block/fops.c,"ssize_t __blkdev_direct_IO(struct kiocb *iocb, struct iov_iter *iter,
		unsigned int nr_pages)
{",dio->waiter
https://elixir.bootlin.com/linux/v6.6/source/block/blk-iocost.c,"void ioc_rqos_throttle(struct rq_qos *rqos, struct bio *bio)
{","iocg->abs_vdebt,iocg->abs_vdebt"
https://elixir.bootlin.com/linux/v6.6/source/block/bio.c,"void bio_alloc_irq_cache_splice(struct bio_alloc_cache *cache)
{","cache->nr_irq,cache->nr_irq"
https://elixir.bootlin.com/linux/v6.6/source/block/bio.c,"void bio_put_percpu_cache(struct bio *bio)
{",cache->nr_irq
https://elixir.bootlin.com/linux/v6.6/source/block/blk-mq-tag.c,"void __blk_mq_tag_busy(struct blk_mq_hw_ctx *hctx)
{",tags->active_queues
https://elixir.bootlin.com/linux/v6.6/source/block/blk-mq-tag.c,"void __blk_mq_tag_idle(struct blk_mq_hw_ctx *hctx)
{",tags->active_queues
https://elixir.bootlin.com/linux/v6.6/source/mm/swap_state.c,"long swapin_nr_pages(unsigned long offset)
{",prev_offset
https://elixir.bootlin.com/linux/v6.6/source/mm/swapfile.c,"void swap_range_alloc(struct swap_info_struct *si, unsigned long offset,
			     unsigned int nr_entries)
{","si->highest_bit,si->highest_bit,si->inuse_pages"
https://elixir.bootlin.com/linux/v6.6/source/mm/swapfile.c,"void swap_range_free(struct swap_info_struct *si, unsigned long offset,
			    unsigned int nr_entries)
{","si->highest_bit,si->highest_bit"
https://elixir.bootlin.com/linux/v6.6/source/mm/swapfile.c,"bool swap_offset_available_and_locked(struct swap_info_struct *si,
					     unsigned long offset)
{",si->swap_map[offset]
https://elixir.bootlin.com/linux/v6.6/source/mm/swapfile.c,"int scan_swap_map_slots(struct swap_info_struct *si,
			       unsigned char usage, int nr,
			       swp_entry_t slots[])
{","si->highest_bit,si->highest_bit,si->highest_bit,si->highest_bit,si->highest_bit,si->swap_map[offset],si->swap_map[offset],si->swap_map[offset],si->swap_map[offset]"
https://elixir.bootlin.com/linux/v6.6/source/mm/swapfile.c,"char __swap_entry_free_locked(struct swap_info_struct *p,
					      unsigned long offset,
					      unsigned char usage)
{",p->swap_map[offset]
https://elixir.bootlin.com/linux/v6.6/source/mm/swapfile.c,"int __swap_duplicate(swp_entry_t entry, unsigned char usage)
{",p->swap_map[offset]
https://elixir.bootlin.com/linux/v6.6/source/mm/page_ext.c,"void __free_page_ext(unsigned long pfn)
{",ms->page_ext
https://elixir.bootlin.com/linux/v6.6/source/mm/page_ext.c,"void __invalidate_page_ext(unsigned long pfn)
{",ms->page_ext
https://elixir.bootlin.com/linux/v6.6/source/mm/page_ext.c,"__meminit pgdat_page_ext_init(struct pglist_data *pgdat)
{","ms->page_ext,ms->page_ext,section->page_ext"
https://elixir.bootlin.com/linux/v6.6/source/mm/mmu_notifier.c,"long
mmu_interval_read_begin(struct mmu_interval_notifier *interval_sub)
{",subscriptions->invalidate_seq
https://elixir.bootlin.com/linux/v6.6/source/mm/mmap.c,"void vma_set_page_prot(struct vm_area_struct *vma)
{",vma->vm_page_prot
https://elixir.bootlin.com/linux/v6.6/source/mm/page-writeback.c,"void wb_update_write_bandwidth(struct bdi_writeback *wb,
				      unsigned long elapsed,
				      unsigned long written)
{","wb->avg_write_bandwidth,wb->avg_write_bandwidth"
https://elixir.bootlin.com/linux/v6.6/source/mm/page-writeback.c,"void wb_update_dirty_ratelimit(struct dirty_throttle_control *dtc,
				      unsigned long dirtied,
				      unsigned long elapsed)
{",wb->dirty_ratelimit
https://elixir.bootlin.com/linux/v6.6/source/mm/page-writeback.c,"void __wb_update_bandwidth(struct dirty_throttle_control *gdtc,
				  struct dirty_throttle_control *mdtc,
				  bool update_ratelimit)
{",wb->bw_time_stamp
https://elixir.bootlin.com/linux/v6.6/source/mm/swap.c,"void __lru_add_drain_all(bool force_all_cpus)
{","lru_drain_gen,lru_drain_gen,lru_drain_gen"
https://elixir.bootlin.com/linux/v6.6/source/mm/filemap.c,"int file_check_and_advance_wb_err(struct file *file)
{","file->f_wb_err,file->f_wb_err"
https://elixir.bootlin.com/linux/v6.6/source/mm/vmscan.c,"bool should_clear_pmd_young(void)
{","(lruvec,(lruvec"
https://elixir.bootlin.com/linux/v6.6/source/mm/vmscan.c,"void reset_bloom_filter(struct lruvec *lruvec, unsigned long seq)
{",lruvec->mm_state.filters[gen]
https://elixir.bootlin.com/linux/v6.6/source/mm/vmscan.c,"bool iterate_mm_list(struct lruvec *lruvec, struct lru_gen_mm_walk *walk,
			    struct mm_struct **iter)
{",mm_state->seq
https://elixir.bootlin.com/linux/v6.6/source/mm/vmscan.c,"bool iterate_mm_list_nowalk(struct lruvec *lruvec, unsigned long max_seq)
{",mm_state->seq
https://elixir.bootlin.com/linux/v6.6/source/mm/vmscan.c,"void reset_ctrl_pos(struct lruvec *lruvec, int type, bool carryover)
{","lrugen->protected[hist][type][tier - 1],lrugen->avg_total[type][tier],lrugen->avg_refaulted[type][tier]"
https://elixir.bootlin.com/linux/v6.6/source/mm/vmscan.c,"bool inc_min_seq(struct lruvec *lruvec, int type, bool can_swap)
{",lrugen->min_seq[type]
https://elixir.bootlin.com/linux/v6.6/source/mm/vmscan.c,"bool try_to_inc_min_seq(struct lruvec *lruvec, bool can_swap)
{",lrugen->min_seq[type]
https://elixir.bootlin.com/linux/v6.6/source/mm/vmscan.c,"void lru_gen_rotate_memcg(struct lruvec *lruvec, int op)
{","pgdat->memcg_lru.seq,pgdat->memcg_lru.seq,pgdat->memcg_lru.seq"
https://elixir.bootlin.com/linux/v6.6/source/mm/vmscan.c,"void lru_gen_release_memcg(struct mem_cgroup *memcg)
{",pgdat->memcg_lru.seq
https://elixir.bootlin.com/linux/v6.6/source/mm/vmscan.c,"int lru_gen_memcg_seg(struct lruvec *lruvec)
{","pgdat->memcg_lru.seq,pgdat->memcg_lru.seq,pgdat->memcg_lru.seq,pgdat->memcg_lru.seq,pgdat->memcg_lru.seq"
https://elixir.bootlin.com/linux/v6.6/source/mm/vmscan.c,"void lru_gen_age_node(struct pglist_data *pgdat, struct scan_control *sc)
{","pgdat->memcg_lru.seq,pgdat->memcg_lru.seq,pgdat->memcg_lru.seq,pgdat->memcg_lru.seq,pgdat->memcg_lru.seq"
https://elixir.bootlin.com/linux/v6.6/source/mm/memcontrol.c,"void mem_cgroup_calculate_protection(struct mem_cgroup *root,
				     struct mem_cgroup *memcg)
{","memcg->memory.emin,memcg->memory.elow"
https://elixir.bootlin.com/linux/v6.6/source/mm/z3fold.c,"void compact_page_work(struct work_struct *w)
{","l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l,l"
https://elixir.bootlin.com/linux/v6.6/source/mm/shmem.c,"long shmem_unused_huge_shrink(struct shmem_sb_info *sbinfo,
		struct shrink_control *sc, unsigned long nr_to_split)
{","sbinfo->shrinklist_len,sbinfo->shrinklist_len"
https://elixir.bootlin.com/linux/v6.6/source/mm/slub.c,"void deactivate_slab(struct kmem_cache *s, struct slab *slab,
			    void *freelist)
{",slab->freelist
https://elixir.bootlin.com/linux/v6.6/source/mm/slub.c,"bool
__update_cpu_freelist_fast(struct kmem_cache *s,
			   void *freelist_old, void *freelist_new,
			   unsigned long tid)
{","c->slab,c->slab,c->slab,c->slab,c->slab,c->slab,c->slab,c->slab,c->slab,c->slab,c->tid,c->tid,c->tid,c->tid,c->tid,c->tid,c->tid,c->tid"
https://elixir.bootlin.com/linux/v6.6/source/mm/slub.c,"void do_slab_free(struct kmem_cache *s,
				struct slab *slab, void *head, void *tail,
				int cnt, unsigned long addr)
{","c->freelist,c->freelist,c->tid,c->tid"
https://elixir.bootlin.com/linux/v6.6/source/mm/slub.c,"CONFIG_SLUB_CPU_PARTIAL
	for_each_online_cpu(cpu) {",slab->slabs
https://elixir.bootlin.com/linux/v6.6/source/mm/hugetlb_cgroup.c,"void __hugetlb_cgroup_commit_charge(int idx, unsigned long nr_pages,
					   struct hugetlb_cgroup *h_cg,
					   struct folio *folio, bool rsvd)
{",h_cg->nodeinfo[folio_nid(folio
https://elixir.bootlin.com/linux/v6.6/source/mm/hugetlb_cgroup.c,"void __hugetlb_cgroup_uncharge_folio(int idx, unsigned long nr_pages,
					   struct folio *folio, bool rsvd)
{",h_cg->nodeinfo[folio_nid(folio
https://elixir.bootlin.com/linux/v6.6/source/mm/ksm.c,"void remove_node_from_stable_tree(struct ksm_stable_node *stable_node)
{","stable_node->kpfn,stable_node->kpfn"
https://elixir.bootlin.com/linux/v6.6/source/mm/ksm.c,"ssize_t max_page_sharing_store(struct kobject *kobj,
				      struct kobj_attribute *attr,
				      const char *buf, size_t count)
{","ksm_max_page_sharing,ksm_max_page_sharing"
https://elixir.bootlin.com/linux/v6.6/source/mm/vmalloc.c,"bool purge_fragmented_block(struct vmap_block *vb,
		struct vmap_block_queue *vbq, struct list_head *purge_list,
		bool force_purge)
{","vb->free,vb->free,vb->dirty,vb->dirty"
https://elixir.bootlin.com/linux/v6.6/source/mm/vmalloc.c,"void purge_fragmented_blocks_allcpus(void)
{","vb->free,vb->free,vb->free"
https://elixir.bootlin.com/linux/v6.6/source/mm/vmalloc.c,"void vb_free(unsigned long addr, unsigned long size)
{",vb->dirty
https://elixir.bootlin.com/linux/v6.6/source/mm/khugepaged.c,"void retract_page_tables(struct address_space *mapping, pgoff_t pgoff)
{",vma->anon_vma
https://elixir.bootlin.com/linux/v6.6/source/mm/mempool.c,"void mempool_free(void *element, mempool_t *pool)
{",pool->curr_nr
https://elixir.bootlin.com/linux/v6.6/source/mm/kasan/quarantine.c,"void kasan_quarantine_reduce(void)
{","quarantine_size,quarantine_max_size"
https://elixir.bootlin.com/linux/v6.6/source/mm/kasan/tags.c,"void save_stack_info(struct kmem_cache *cache, void *object,
			gfp_t gfp_flags, bool is_free)
{",entry->ptr
https://elixir.bootlin.com/linux/v6.6/source/mm/kasan/shadow.c,"int kasan_populate_vmalloc(unsigned long addr, unsigned long size)
{","p,p,p,p"
https://elixir.bootlin.com/linux/v6.6/source/mm/kfence/core.c,"void kfence_shutdown_cache(struct kmem_cache *s)
{","meta->cache,meta->cache,meta->cache,meta->state,meta->state"
https://elixir.bootlin.com/linux/v6.6/source/mm/kfence/kfence_test.c,"void probe_console(void *ignore, const char *buf, size_t len)
{",observed.nlines
https://elixir.bootlin.com/linux/v6.6/source/mm/kfence/kfence_test.c,"void test_invalid_access(struct kunit *test)
{",__kfence_pool[10]
https://elixir.bootlin.com/linux/v6.6/source/lib/rbtree.c,"void
__rb_rotate_set_parents(struct rb_node *old, struct rb_node *new,
			struct rb_root *root, int color)
{","node->rb_left,node->rb_left,tmp2->rb_right,parent->rb_left,parent->rb_left,parent->rb_left,gparent->rb_right,gparent->rb_left,parent->rb_right,parent->rb_right,parent->rb_right,sibling->rb_right,sibling->rb_right,sibling->rb_right,sibling->rb_right,tmp2->rb_left,node->rb_right,node->rb_right,sibling->rb_left,sibling->rb_left,sibling->rb_left,sibling->rb_left"
https://elixir.bootlin.com/linux/v6.6/source/lib/sbitmap.c,"void sbitmap_queue_update_wake_batch(struct sbitmap_queue *sbq,
					    unsigned int depth)
{",sbq->wake_batch
https://elixir.bootlin.com/linux/v6.6/source/lib/sbitmap.c,"long __sbitmap_queue_get_batch(struct sbitmap_queue *sbq, int nr_tags,
					unsigned int *offset)
{","map->word,map->word"
https://elixir.bootlin.com/linux/v6.6/source/lib/llist.c,"bool llist_add_batch(struct llist_node *new_first, struct llist_node *new_last,
		     struct llist_head *head)
{",head->first
https://elixir.bootlin.com/linux/v6.6/source/lib/stackdepot.c,"void depot_init_pool(void **prealloc)
{","pool_index,pool_index,pool_index,pool_index,pool_index,pool_index,pool_index,pool_index"
https://elixir.bootlin.com/linux/v6.6/source/lib/stackdepot.c,"int stack_depot_fetch(depot_stack_handle_t handle,
			       unsigned long **entries)
{","pool_index,pool_index,pool_index"
https://elixir.bootlin.com/linux/v6.6/source/lib/debugobjects.c,"void fill_pool(void)
{","obj_pool_free,obj_pool_free,obj_pool_free,obj_nr_tofree"
https://elixir.bootlin.com/linux/v6.6/source/lib/debugobjects.c,"void free_obj_work(struct work_struct *work)
{","obj_pool_free,obj_pool_free,obj_nr_tofree,obj_nr_tofree,obj_nr_tofree"
https://elixir.bootlin.com/linux/v6.6/source/lib/debugobjects.c,"void __free_object(struct debug_obj *obj)
{","obj_pool_free,obj_pool_free,obj_nr_tofree,obj_nr_tofree"
https://elixir.bootlin.com/linux/v6.6/source/drivers/cpufreq/cpufreq_governor.c,"void dbs_update_util_handler(struct update_util_data *data, u64 time,
				    unsigned int flags)
{",policy_dbs->last_sample_time
https://elixir.bootlin.com/linux/v6.6/source/drivers/cpufreq/amd-pstate-ut.c,"void amd_pstate_ut_check_perf(u32 index)
{","cpudata->lowest_nonlinear_perf,cpudata->nominal_perf,cpudata->highest_perf,cpudata->lowest_perf"
https://elixir.bootlin.com/linux/v6.6/source/drivers/cpufreq/intel_pstate.c,"int intel_pstate_init_cpu(unsigned int cpunum)
{",all_cpu_data[cpunum]
https://elixir.bootlin.com/linux/v6.6/source/drivers/cpufreq/intel_pstate.c,"void intel_pstate_driver_cleanup(void)
{","all_cpu_data[cpu],all_cpu_data[cpu]"
https://elixir.bootlin.com/linux/v6.6/source/drivers/cpufreq/intel_pstate.c,"__init intel_pstate_init(void)
{","hwp_active,hwp_active,hwp_active"
https://elixir.bootlin.com/linux/v6.6/source/drivers/tty/n_tty.c,"size_t
n_tty_receive_buf_common(struct tty_struct *tty, const u8 *cp, const u8 *fp,
			 size_t count, bool flow)
{",ldata->no_room
https://elixir.bootlin.com/linux/v6.6/source/drivers/virtio/virtio_ring.c,"bool more_used_packed(const struct vring_virtqueue *vq)
{",vq->last_used_idx
https://elixir.bootlin.com/linux/v6.6/source/drivers/firmware/efi/libstub/efi-stub-entry.c,"__efiapi efi_pe_entry(efi_handle_t handle,
				   efi_system_table_t *systab)
{",efi_system_table
https://elixir.bootlin.com/linux/v6.6/source/drivers/xen/pvcalls-front.c,"int pvcalls_front_socket(struct socket *sock)
{",bedata->rsp[req_id].req_id
https://elixir.bootlin.com/linux/v6.6/source/drivers/xen/pvcalls-front.c,"int pvcalls_front_connect(struct socket *sock, struct sockaddr *addr,
				int addr_len, int flags)
{",bedata->rsp[req_id].req_id
https://elixir.bootlin.com/linux/v6.6/source/drivers/xen/pvcalls-front.c,"int pvcalls_front_bind(struct socket *sock, struct sockaddr *addr, int addr_len)
{",bedata->rsp[req_id].req_id
https://elixir.bootlin.com/linux/v6.6/source/drivers/xen/pvcalls-front.c,"int pvcalls_front_listen(struct socket *sock, int backlog)
{",bedata->rsp[req_id].req_id
https://elixir.bootlin.com/linux/v6.6/source/drivers/xen/pvcalls-front.c,"int pvcalls_front_accept(struct socket *sock, struct socket *newsock, int flags)
{","bedata->rsp[req_id].req_id,bedata->rsp[req_id].req_id,map->passive.inflight_req_id,map->passive.inflight_req_id"
https://elixir.bootlin.com/linux/v6.6/source/drivers/xen/events/events_base.c,"int get_evtchn_to_irq(evtchn_port_t evtchn)
{",evtchn_to_irq[EVTCHN_ROW(evtchn
https://elixir.bootlin.com/linux/v6.6/source/drivers/base/core.c,"void device_links_missing_supplier(struct device *dev)
{",link->status
https://elixir.bootlin.com/linux/v6.6/source/drivers/base/core.c,"int device_links_check_suppliers(struct device *dev)
{",link->status
https://elixir.bootlin.com/linux/v6.6/source/drivers/base/core.c,"void device_links_force_bind(struct device *dev)
{",link->status
https://elixir.bootlin.com/linux/v6.6/source/drivers/base/core.c,"void device_links_driver_bound(struct device *dev)
{","link->status,link->status,link->status,link->status,link->status"
https://elixir.bootlin.com/linux/v6.6/source/drivers/base/core.c,"void __device_links_no_driver(struct device *dev)
{","link->status,link->status"
https://elixir.bootlin.com/linux/v6.6/source/drivers/base/core.c,"void device_links_no_driver(struct device *dev)
{","link->status,link->status"
https://elixir.bootlin.com/linux/v6.6/source/drivers/base/core.c,"void device_links_driver_cleanup(struct device *dev)
{","link->status,link->status"
https://elixir.bootlin.com/linux/v6.6/source/drivers/base/core.c,"bool device_links_busy(struct device *dev)
{","link->status,link->status"
https://elixir.bootlin.com/linux/v6.6/source/drivers/base/core.c,"void device_links_unbind_consumers(struct device *dev)
{",link->status
https://elixir.bootlin.com/linux/v6.6/source/drivers/edac/altera_edac.c,"ssize_t altr_sdr_mc_err_inject_write(struct file *file,
					    const char __user *data,
					    size_t count, loff_t *ppos)
{","ptemp[0],ptemp[1]"
https://elixir.bootlin.com/linux/v6.6/source/drivers/edac/altera_edac.c,"__maybe_unused
altr_edac_device_trig(struct file *file, const char __user *user_buf,
		      size_t count, loff_t *ppos)

{",ptemp[i]
https://elixir.bootlin.com/linux/v6.6/source/drivers/infiniband/ulp/rtrs/rtrs-clt.c,"int create_cm(struct rtrs_clt_con *con)
{",clt_path->state
https://elixir.bootlin.com/linux/v6.6/source/drivers/infiniband/ulp/rtrs/rtrs-clt.c,"int rtrs_send_path_info(struct rtrs_clt_path *clt_path)
{",clt_path->state
https://elixir.bootlin.com/linux/v6.6/source/drivers/infiniband/hw/hfi1/user_sdma.c,"int user_sdma_send_pkts(struct user_sdma_request *req, u16 maxpkts)
{",iovec->offset
https://elixir.bootlin.com/linux/v6.6/source/drivers/infiniband/hw/hfi1/file_ops.c,"int ctxt_reset(struct hfi1_ctxtdata *uctxt)
{","dd->flags,dd->flags"
https://elixir.bootlin.com/linux/v6.6/source/drivers/infiniband/hw/hfi1/sdma.c,"void sdma_seqfile_dump_sde(struct seq_file *s, struct sdma_engine *sde)
{",sde->descq_tail
https://elixir.bootlin.com/linux/v6.6/source/drivers/infiniband/hw/hfi1/sdma.c,"int sdma_ahg_alloc(struct sdma_engine *sde)
{",sde->ahg_bits
https://elixir.bootlin.com/linux/v6.6/source/drivers/infiniband/hw/efa/efa_com.c,"u32 efa_com_reg_read32(struct efa_com_dev *edev, u16 offset)
{","read_resp->req_id,read_resp->req_id,read_resp->req_id"
https://elixir.bootlin.com/linux/v6.6/source/drivers/infiniband/core/cq.c,"int ib_alloc_cqs(struct ib_device *dev, unsigned int nr_cqes,
			enum ib_poll_context poll_ctx)
{",default_comp_vector
https://elixir.bootlin.com/linux/v6.6/source/drivers/infiniband/core/netlink.c,"void rdma_nl_register(unsigned int index,
		      const struct rdma_nl_cbs cb_table[])
{",rdma_nl_types[index].cb_table
https://elixir.bootlin.com/linux/v6.6/source/drivers/infiniband/core/cma.c,"int cma_ib_handler(struct ib_cm_id *cm_id,
			  const struct ib_cm_event *ib_event)
{","id_priv->state,id_priv->state"
https://elixir.bootlin.com/linux/v6.6/source/drivers/infiniband/sw/siw/siw_qp_rx.c,"int siw_orqe_start_rx(struct siw_qp *qp)
{",orqe->flags
https://elixir.bootlin.com/linux/v6.6/source/drivers/infiniband/sw/siw/siw_cq.c,"int siw_reap_cqe(struct siw_cq *cq, struct ib_wc *wc)
{",cqe->flags
https://elixir.bootlin.com/linux/v6.6/source/drivers/nvme/host/ioctl.c,"int nvme_uring_cmd_io(struct nvme_ctrl *ctrl, struct nvme_ns *ns,
		struct io_uring_cmd *ioucmd, unsigned int issue_flags, bool vec)
{",cmd->flags
https://elixir.bootlin.com/linux/v6.6/source/drivers/nvme/target/core.c,"void nvmet_update_sq_head(struct nvmet_req *req)
{",req->sq->sqhd
https://elixir.bootlin.com/linux/v6.6/source/drivers/crypto/nx/nx-common-powernv.c,"int wait_for_csb(struct nx842_workmem *wmem,
			struct coprocessor_status_block *csb)
{","csb->flags,csb->flags,csb->flags"
https://elixir.bootlin.com/linux/v6.6/source/drivers/platform/surface/aggregator/ssh_packet_layer.c,"void ssh_packet_next_try(struct ssh_packet *p)
{","p->priority,p->priority,p->priority,p->priority,p->priority"
https://elixir.bootlin.com/linux/v6.6/source/drivers/platform/surface/aggregator/ssh_packet_layer.c,"void ssh_ptl_cancel(struct ssh_packet *p)
{","p->ptl,p->ptl"
https://elixir.bootlin.com/linux/v6.6/source/drivers/platform/surface/aggregator/ssh_request_layer.c,"bool ssh_rtl_cancel_nonpending(struct ssh_request *r)
{","r->state,r->state,r->state,r->state"
https://elixir.bootlin.com/linux/v6.6/source/drivers/platform/surface/aggregator/controller.c,"int ssam_controller_start(struct ssam_controller *ctrl)
{",ctrl->state
https://elixir.bootlin.com/linux/v6.6/source/drivers/platform/surface/aggregator/controller.c,"void ssam_controller_shutdown(struct ssam_controller *ctrl)
{",ctrl->state
https://elixir.bootlin.com/linux/v6.6/source/drivers/platform/surface/aggregator/controller.c,"void ssam_controller_destroy(struct ssam_controller *ctrl)
{","ctrl->state,ctrl->state"
https://elixir.bootlin.com/linux/v6.6/source/drivers/platform/surface/aggregator/controller.c,"int ssam_controller_suspend(struct ssam_controller *ctrl)
{",ctrl->state
https://elixir.bootlin.com/linux/v6.6/source/drivers/platform/surface/aggregator/controller.c,"int ssam_controller_resume(struct ssam_controller *ctrl)
{",ctrl->state
https://elixir.bootlin.com/linux/v6.6/source/drivers/hv/ring_buffer.c,"u32 hv_pkt_iter_avail(const struct hv_ring_buffer_info *rbi)
{",desc->len8
https://elixir.bootlin.com/linux/v6.6/source/drivers/hv/channel_mgmt.c,"void vmbus_wait_for_unload(void)
{",msg->header.message_type
https://elixir.bootlin.com/linux/v6.6/source/drivers/pci/endpoint/functions/pci-epf-test.c,"void pci_epf_test_raise_irq(struct pci_epf_test *epf_test,
				   struct pci_epf_test_reg *reg)
{",reg->status
https://elixir.bootlin.com/linux/v6.6/source/drivers/scsi/storvsc_drv.c,"void storvsc_change_target_cpu(struct vmbus_channel *channel, u32 old,
				      u32 new)
{",stor_device->stor_chns[cpu]
https://elixir.bootlin.com/linux/v6.6/source/drivers/scsi/storvsc_drv.c,"int storvsc_do_io(struct hv_device *device,
			 struct storvsc_cmd_request *request, u16 q_num)
{",stor_device->stor_chns[q_num]
https://elixir.bootlin.com/linux/v6.6/source/drivers/scsi/fcoe/fcoe.c,"void fcoe_recv_frame(struct sk_buff *skb)
{",stats->ErrorFrames
https://elixir.bootlin.com/linux/v6.6/source/drivers/scsi/lpfc/lpfc_sli.c,"void
__lpfc_sli4_switch_eqmode(struct lpfc_queue *eq, uint8_t mode)
{",eq->mode
https://elixir.bootlin.com/linux/v6.6/source/drivers/scsi/qla2xxx/qla_target.c,"void qlt_free_session_done(struct work_struct *work)
{",sess->logout_completed
https://elixir.bootlin.com/linux/v6.6/source/drivers/scsi/qla2xxx/qla_edif.c,"void qla_edif_sess_down(struct scsi_qla_host *vha, struct fc_port *sess)
{","sess->edif.sess_down_acked,sess->edif.sess_down_acked"
https://elixir.bootlin.com/linux/v6.6/source/drivers/dma/mediatek/mtk-hsdma.c,"void mtk_hsdma_free_rooms_in_ring(struct mtk_hsdma_device *hsdma)
{",rxd->desc2
https://elixir.bootlin.com/linux/v6.6/source/drivers/dma/xilinx/xilinx_dpdma.c,"ssize_t xilinx_dpdma_debugfs_read(struct file *f, char __user *buf,
					 size_t size, loff_t *pos)
{",dpdma_debugfs.testcase
https://elixir.bootlin.com/linux/v6.6/source/drivers/md/raid10.c,"void raise_barrier(struct r10conf *conf, int force)
{",conf->barrier
https://elixir.bootlin.com/linux/v6.6/source/drivers/md/raid1.c,"bool _wait_barrier(struct r1conf *conf, int idx, bool nowait)
{",conf->array_frozen
https://elixir.bootlin.com/linux/v6.6/source/drivers/md/raid1.c,"bool wait_read_barrier(struct r1conf *conf, sector_t sector_nr, bool nowait)
{",conf->array_frozen
https://elixir.bootlin.com/linux/v6.6/source/drivers/md/dm-mpath.c,"void __switch_pg(struct multipath *m, struct priority_group *pg)
{","m->next_pg,m->next_pg,m->current_pg,m->current_pg,m->current_pg,m->current_pg"
https://elixir.bootlin.com/linux/v6.6/source/drivers/md/dm-writecache.c,"void write_original_sector_seq_count(struct dm_writecache *wc, struct wc_entry *e,
					    uint64_t original_sector, uint64_t seq_count)
{","(wc,(wc,(wc"
https://elixir.bootlin.com/linux/v6.6/source/drivers/md/dm-writecache.c,"void __writeback_throttle(struct dm_writecache *wc, struct writeback_list *wbl)
{",wc->writeback_size
https://elixir.bootlin.com/linux/v6.6/source/drivers/dma-buf/st-dma-fence.c,"int thread_signal_callback(void *arg)
{","cb.seen,cb.seen,cb.seen"
https://elixir.bootlin.com/linux/v6.6/source/drivers/s390/scsi/zfcp_erp.c,"void zfcp_erp_strategy_check_fsfreq(struct zfcp_erp_action *act)
{",req->erp_action
https://elixir.bootlin.com/linux/v6.6/source/drivers/s390/net/ism_drv.c,"int ism_cmd(struct ism_dev *ism, void *cmd)
{","resp->ret,resp->ret"
https://elixir.bootlin.com/linux/v6.6/source/drivers/s390/net/qeth_l2_main.c,"void qeth_addr_change_event_worker(struct work_struct *work)
{",card->info.pnso_mode
https://elixir.bootlin.com/linux/v6.6/source/drivers/usb/class/cdc-wdm.c,"int service_outstanding_interrupt(struct wdm_device *desc)
{","desc->length,desc->length,desc->length,desc->length"
https://elixir.bootlin.com/linux/v6.6/source/drivers/usb/gadget/udc/gr_udc.c,"int gr_handle_out_ep(struct gr_ep *ep)
{",req->curr_desc->ctrl
https://elixir.bootlin.com/linux/v6.6/source/drivers/i2c/busses/i2c-rk3x.c,"int rk3x_i2c_wait_xfer_poll(struct rk3x_i2c *i2c)
{",i2c->busy
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/amt.c,"void amt_update_gw_status(struct amt_dev *amt, enum amt_status status,
				 bool validate)
{","amt->status,amt->status"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/veth.c,"int veth_poll(struct napi_struct *napi, int budget)
{",rq->rx_notify_masked
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/tun.c,"void tun_flow_update(struct tun_struct *tun, u32 rxhash,
			    struct tun_file *tfile)
{",e->queue_index
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/wireless/mediatek/mt76/mt7996/mac.c,"void mt7996_mac_reset_work(struct work_struct *work)
{",dev->recovery.state
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/wireless/mediatek/mt76/mt7915/mac.c,"void mt7915_mac_reset_work(struct work_struct *work)
{",dev->recovery.state
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/wireless/ath/ath9k/ar9002_mac.c,"void
ar9002_set_txdesc(struct ath_hw *ah, void *ds, struct ath_tx_info *i)
{","ads->ds_ctl11,ads->ds_ctl9,ads->ds_ctl1,ads->ds_ctl1,ads->ds_ctl10"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/wireless/ath/ath9k/ar9003_mac.c,"void
ar9003_set_txdesc(struct ath_hw *ah, void *ds, struct ath_tx_info *i)
{","ads->ctl21,ads->ctl22,ads->ctl20"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/wireless/ath/wcn36xx/dxe.c,"int wcn36xx_rx_handle_packets(struct wcn36xx *wcn,
				     struct wcn36xx_dxe_ch *ch,
				     u32 ctrl,
				     u32 en_mask,
				     u32 int_mask,
				     u32 status_reg)
{",dxe->ctrl
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/wireless/intel/iwlwifi/pcie/trans.c,"int iwl_trans_pcie_wait_txq_empty(struct iwl_trans *trans, int txq_idx)
{",txq->write_ptr
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/wireless/intel/iwlwifi/mvm/rxmq.c,"void iwl_mvm_rx_queue_notif(struct iwl_mvm *mvm, struct napi_struct *napi,
			    struct iwl_rx_cmd_buffer *rxb, int queue)
{",mvm->queue_sync_state
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c,"void iwl_mvm_sync_rx_queues_internal(struct iwl_mvm *mvm,
				     enum iwl_mvm_rxq_notif_type type,
				     bool sync,
				     const void *data, u32 size)
{","mvm->queue_sync_state,mvm->queue_sync_state,mvm->queue_sync_state"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/wireless/broadcom/brcm80211/brcmfmac/sdio.c,"void brcmf_sdio_dataworker(struct work_struct *work)
{",bus->dpc_triggered
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/realtek/r8169_main.c,"void rtl8169_mark_to_asic(struct RxDesc *desc)
{",desc->opts1
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/realtek/r8169_main.c,"netdev_tx_t rtl8169_start_xmit(struct sk_buff *skb,
				      struct net_device *dev)
{",tp->cur_tx
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/realtek/r8169_main.c,"void rtl_tx(struct net_device *dev, struct rtl8169_private *tp,
		   int budget)
{","tp->cur_tx,tp->dirty_tx,tp->dirty_tx"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/qlogic/qed/qed_iwarp.c,"int qed_iwarp_destroy_qp(struct qed_hwfn *p_hwfn, struct qed_rdma_qp *qp)
{","ep->state,ep->state"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/mellanox/mlx4/en_tx.c,"netdev_tx_t mlx4_en_xmit(struct sk_buff *skb, struct net_device *dev)
{","ring->prod,ring->prod,ring->prod,ring->prod"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/mellanox/mlx4/en_tx.c,"netdev_tx_t mlx4_en_xmit_frame(struct mlx4_en_rx_ring *rx_ring,
			       struct mlx4_en_rx_alloc *frame,
			       struct mlx4_en_priv *priv, unsigned int length,
			       int tx_ind, bool *doorbell_pending)
{","ring->prod,ring->prod"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/mellanox/mlx5/core/en_dcbnl.c,"int mlx5e_trust_initialize(struct mlx5e_priv *priv)
{","priv->dcbx_dp.trust_state,priv->dcbx_dp.trust_state,priv->dcbx_dp.trust_state,priv->dcbx_dp.trust_state"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/mellanox/mlx5/core/lib/aso.c,"void mlx5_aso_post_wqe(struct mlx5_aso *aso, bool with_data,
		       struct mlx5_wqe_ctrl_seg *doorbell_cseg)
{",doorbell_cseg
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/mellanox/mlx5/core/en/qos.c,"int mlx5e_open_qos_sq(struct mlx5e_priv *priv, struct mlx5e_channels *chs,
		      u16 node_qid, u32 hw_id)
{","priv->htb_qos_sq_stats[node_qid],priv->htb_qos_sq_stats"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/mellanox/mlx5/core/en/htb.c,"int
mlx5e_htb_leaf_to_inner(struct mlx5e_htb *htb, u16 classid, u16 child_classid,
			u64 rate, u64 ceil, struct netlink_ext_ack *extack)
{","node->qid,node->qid,node->qid"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/mellanox/mlx5/core/en/htb.c,"int mlx5e_htb_leaf_del(struct mlx5e_htb *htb, u16 *classid,
		       struct netlink_ext_ack *extack)
{","node->qid,node->qid,node->qid"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/mellanox/mlx5/core/en/htb.c,"int
mlx5e_htb_leaf_del_last(struct mlx5e_htb *htb, u16 classid, bool force,
			struct netlink_ext_ack *extack)
{","node->qid,node->qid,node->qid"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/mediatek/mtk_ppe.c,"void
mtk_flow_entry_update_l2(struct mtk_ppe *ppe, struct mtk_flow_entry *entry)
{",hwe->ib1
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/xilinx/xilinx_axienet_main.c,"netdev_tx_t
axienet_start_xmit(struct sk_buff *skb, struct net_device *ndev)
{",lp->tx_bd_tail
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/freescale/fec_main.c,"void
fec_enet_tx_queue(struct net_device *ndev, u16 queue_id, int budget)
{",txq->bd.cur
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/sfc/tc_counters.c,"void efx_tc_counter_work(struct work_struct *work)
{",cnt->touched
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/sfc/ef100_rep.c,"void efx_ef100_rep_rx_packet(struct efx_rep *efv, struct efx_rx_buffer *rx_buf)
{",efv->read_index
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/sfc/efx_common.c,"void efx_schedule_reset(struct efx_nic *efx, enum reset_type type)
{",efx->state
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/sfc/siena/efx_common.c,"void efx_siena_schedule_reset(struct efx_nic *efx, enum reset_type type)
{",efx->state
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/sfc/falcon/efx.c,"void ef4_schedule_reset(struct ef4_nic *efx, enum reset_type type)
{",efx->state
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/google/gve/gve_ethtool.c,"int gve_set_priv_flags(struct net_device *netdev, u32 flags)
{",priv->ethtool_flags
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/ice/ice_ptp.c,"int ice_ptp_update_cached_phctime(struct ice_pf *pf)
{","pf->ptp.cached_phc_jiffies,pf->ptp.cached_phc_jiffies,pf->ptp.cached_phc_time"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/ice/ice_main.c,"int ice_xdp_alloc_setup_rings(struct ice_vsi *vsi)
{","vsi->xdp_rings[i],vsi->xdp_rings[i],vsi->xdp_rings[i],vsi->xdp_rings[i],vsi->xdp_rings[i]"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/ice/ice_lib.c,"void ice_vsi_free_stats(struct ice_vsi *vsi)
{","vsi_stat->rx_ring_stats[i],vsi_stat->rx_ring_stats[i],vsi_stat->tx_ring_stats[i],vsi_stat->tx_ring_stats[i]"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/ice/ice_lib.c,"int ice_vsi_alloc_ring_stats(struct ice_vsi *vsi)
{","tx_ring_stats[i],rx_ring_stats[i]"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/ice/ice_lib.c,"void ice_vsi_clear_rings(struct ice_vsi *vsi)
{","vsi->rx_rings[i],vsi->rx_rings[i],vsi->tx_rings[i],vsi->tx_rings[i]"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/ice/ice_lib.c,"void
ice_vsi_realloc_stat_arrays(struct ice_vsi *vsi, int prev_txq, int prev_rxq)
{","vsi_stat->rx_ring_stats[i],vsi_stat->rx_ring_stats[i],vsi_stat->tx_ring_stats[i],vsi_stat->tx_ring_stats[i]"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/igb/igb_main.c,"u32 igb_rd32(struct e1000_hw *hw, u32 reg)
{",hw->hw_addr
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c,"void ixgbe_update_stats(struct ixgbe_adapter *adapter)
{","adapter->rx_ring[i],adapter->rx_ring[i]"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/igc/igc_main.c,"u32 igc_rd32(struct igc_hw *hw, u32 reg)
{",hw->hw_addr
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/i40e/i40e_ethtool.c,"int i40e_set_fec_cfg(struct net_device *netdev, u8 fec_cfg)
{",pf->flags
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/i40e/i40e_ethtool.c,"int i40e_set_priv_flags(struct net_device *dev, u32 flags)
{",pf->flags
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/i40e/i40e_main.c,"void i40e_vsi_clear_rings(struct i40e_vsi *vsi)
{",vsi->tx_rings[i]
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/fm10k/fm10k_iov.c,"s32 fm10k_iov_event(struct fm10k_intfc *interface)
{",interface->iov_data
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/fm10k/fm10k_iov.c,"s32 fm10k_iov_mbx(struct fm10k_intfc *interface)
{",interface->iov_data
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/fm10k/fm10k_pci.c,"u32 fm10k_read_reg(struct fm10k_hw *hw, int reg)
{",hw->hw_addr
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/intel/fm10k/fm10k_pci.c,"void fm10k_detach_subtask(struct fm10k_intfc *interface)
{",interface->uc_addr
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/netronome/nfp/nfp_net_common.c,"int nfp_net_xdp_setup_drv(struct nfp_net *nn, struct netdev_bpf *bpf)
{",nn->dp.xdp_prog
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/pensando/ionic/ionic_lif.c,"void ionic_qcqs_free(struct ionic_lif *lif)
{","lif->adminqcq,lif->adminqcq"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/broadcom/bnxt/bnxt.c,"netdev_tx_t bnxt_start_xmit(struct sk_buff *skb, struct net_device *dev)
{","txr->tx_prod,txr->tx_prod,txr->tx_prod,txr->tx_prod"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/broadcom/bnxt/bnxt.c,"void bnxt_tx_int(struct bnxt *bp, struct bnxt_napi *bnapi, int budget)
{",txr->tx_cons
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/broadcom/bnxt/bnxt_xdp.c,"void bnxt_tx_int_xdp(struct bnxt *bp, struct bnxt_napi *bnapi, int budget)
{",txr->tx_cons
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c,"int cn23xx_reset_io_queues(struct octeon_device *oct)
{",reg_val
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c,"void cn23xx_disable_io_queues(struct octeon_device *oct)
{","d64,d32"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/cavium/liquidio/cn23xx_pf_device.c,"void cn23xx_bar1_idx_setup(struct octeon_device *oct, u64 core_addr,
				  u32 idx, int valid)
{",bar1
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/cavium/liquidio/cn23xx_vf_device.c,"int cn23xx_vf_reset_io_queues(struct octeon_device *oct, u32 num_queues)
{",reg_val
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/amazon/ena/ena_com.c,"u32 ena_com_reg_bar_read32(struct ena_com_dev *ena_dev, u16 offset)
{","read_resp->req_id,read_resp->req_id"
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/marvell/octeontx2/nic/qos.c,"int otx2_qos_leaf_to_inner(struct otx2_nic *pfvf, u16 classid,
				  u16 child_classid, u64 rate, u64 ceil, u64 prio,
				  u32 quantum, struct netlink_ext_ack *extack)
{",node->qid
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/aquantia/atlantic/aq_main.c,"netdev_features_t aq_ndev_fix_features(struct net_device *ndev,
					      netdev_features_t features)
{",aq_nic->xdp_prog
https://elixir.bootlin.com/linux/v6.6/source/drivers/net/ethernet/aquantia/atlantic/aq_ring.c,"int aq_get_rxpages(struct aq_ring_s *self, struct aq_ring_buff_s *rxbuf)
{",self->xdp_prog
https://elixir.bootlin.com/linux/v6.6/source/drivers/hwtracing/coresight/coresight-etm-perf.c,"void etm_event_stop(struct perf_event *event, int mode)
{","handle->event,handle->event,handle->event"
https://elixir.bootlin.com/linux/v6.6/source/drivers/hwtracing/coresight/coresight-tmc-etr.c,"void tmc_etr_disable_hw(struct tmc_drvdata *drvdata)
{","drvdata->sysfs_buf,drvdata->sysfs_buf"
https://elixir.bootlin.com/linux/v6.6/source/drivers/char/random.c,"int crng_reseed_interval(void)
{",early_boot
https://elixir.bootlin.com/linux/v6.6/source/drivers/char/random.c,"void crng_reseed(struct work_struct *work)
{",base_crng.generation
https://elixir.bootlin.com/linux/v6.6/source/drivers/char/random.c,"void crng_make_state(u32 chacha_state[CHACHA_STATE_WORDS],
			    u8 *random_data, size_t random_data_len)
{",base_crng.generation
https://elixir.bootlin.com/linux/v6.6/source/drivers/char/xillybus/xillyusb.c,"int process_in_opcode(struct xillyusb_dev *xdev,
			     int opcode,
			     int chan_num)
{",chan->read_data_ok
https://elixir.bootlin.com/linux/v6.6/source/drivers/char/xillybus/xillyusb.c,"ssize_t xillyusb_read(struct file *filp, char __user *userbuf,
			     size_t count, loff_t *f_pos)
{","chan->read_data_ok,chan->read_data_ok,chan->read_data_ok,fifo->fill,fifo->fill"
https://elixir.bootlin.com/linux/v6.6/source/drivers/iommu/dma-iommu.c,"int iommu_dma_init_fq(struct iommu_domain *domain)
{",cookie->fq_domain
https://elixir.bootlin.com/linux/v6.6/source/drivers/iommu/iommufd/io_pagetable.c,"int iopt_disable_large_pages(struct io_pagetable *iopt)
{",iopt->disable_large_pages
https://elixir.bootlin.com/linux/v6.6/source/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.c,"int arm_smmu_write_ctx_desc(struct arm_smmu_domain *smmu_domain, int ssid,
			    struct arm_smmu_ctx_desc *cd)
{",cdptr[0]
https://elixir.bootlin.com/linux/v6.6/source/drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.c,"void arm_smmu_write_strtab_ent(struct arm_smmu_master *master, u32 sid,
				      __le64 *dst)
{","dst[0],dst[0]"
https://elixir.bootlin.com/linux/v6.6/source/drivers/accel/ivpu/ivpu_job.c,"int ivpu_cmdq_push_job(struct ivpu_cmdq *cmdq, struct ivpu_job *job)
{",header->tail
https://elixir.bootlin.com/linux/v6.6/source/drivers/bluetooth/hci_bcm4377.c,"void bcm4377_poll_completion_ring(struct bcm4377_data *bcm4377,
					 struct bcm4377_completion_ring *ring)
{",heads[ring->ring_id]
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/drm_gem.c,"void
drm_gem_object_handle_put_unlocked(struct drm_gem_object *obj)
{",obj->handle_count
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/drm_vblank.c,"int drm_vblank_enable(struct drm_device *dev, unsigned int pipe)
{",vblank->enabled
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/amd/amdkfd/kfd_process.c,"int kfd_process_drain_interrupts(struct kfd_process_device *pdd)
{","pdd->process->irq_drain_is_open,pdd->process->irq_drain_is_open,pdd->process->irq_drain_is_open"
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/amd/amdgpu/amdgpu_ih.c,"void amdgpu_ih_ring_write(struct amdgpu_device *adev, struct amdgpu_ih_ring *ih,
			  const uint32_t *iv, unsigned int num_dw)
{",ih->rptr
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/i915_scheduler.c,"void update_priorities(struct i915_sched_node *node, prio) {","node->attr.priority,node->attr.priority"
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/i915_active.c,"void
excl_retire(struct dma_fence *fence, struct dma_fence_cb *cb)
{","it->timeline,it->timeline,ref->cache"
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/i915_active.c,"bool is_idle_barrier(struct active_node *node, u64 idx)
{","ref->cache,ref->cache,ref->cache,ref->cache"
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/i915_request.c,"long i915_request_wait_timeout(struct i915_request *rq,
			       unsigned int flags,
			       long timeout)
{",wait.tsk
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/i915_vma.c,"int i915_vma_bind(struct i915_vma *vma,
		  unsigned int pat_index,
		  u32 flags,
		  struct i915_vma_work *work,
		  struct i915_vma_resource *vma_res)
{",vma->iomap
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/intel_runtime_pm.c,"depot_stack_handle_t
track_intel_runtime_pm_wakeref(struct intel_runtime_pm *rpm)
{",rpm->debug.last_release
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/i915_perf.c,"void i915_oa_stream_destroy(struct i915_perf_stream *stream)
{",g->exclusive_stream
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/i915_perf.c,"int i915_oa_stream_init(struct i915_perf_stream *stream,
			       struct drm_i915_perf_open_param *param,
			       struct perf_open_properties *props)
{",g->exclusive_stream
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/i915_mitigations.c,"int mitigations_set(const char *val, const struct kernel_param *kp)
{",mitigations
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/i915_mitigations.c,"int mitigations_get(char *buffer, const struct kernel_param *kp)
{","mitigations,mitigations"
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/selftests/i915_active.c,"void __live_retire(struct i915_active *base)
{",active->retired
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/selftests/i915_request.c,"int mock_breadcrumbs_smoketest(void *arg)
{","threads[n].result,threads[n].stop"
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/selftests/i915_request.c,"int live_parallel_engines(void *arg)
{",threads[idx].result
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/selftests/i915_request.c,"int perf_parallel_engines(void *arg)
{",engines[idx].result
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/selftests/i915_sw_fence.c,"int test_ipc(void *arg)
{",ipc.value
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/intel_execlists_submission.c,"bool bad_request(const struct i915_request *rq)
{","engine->context_tag,engine->context_tag,engine->context_tag"
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/intel_execlists_submission.c,"void execlists_schedule_in(struct i915_request *rq, int idx)
{",ce->inflight
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/intel_execlists_submission.c,"void __execlists_schedule_out(struct i915_request * const rq,
				     struct intel_context * const ce)
{",ce->inflight
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/intel_execlists_submission.c,"void execlists_dequeue(struct intel_engine_cs *engine)
{","ve->request,rq->engine"
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/intel_execlists_submission.c,"void new_timeslice(struct intel_engine_execlists *el)
{",execlists->active
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/intel_execlists_submission.c,"void execlists_submission_tasklet(struct tasklet_struct *t)
{","engine->execlists.error_interrupt,engine->execlists.error_interrupt,engine->execlists.error_interrupt,engine->execlists.error_interrupt,engine->execlists.error_interrupt"
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/intel_execlists_submission.c,"void execlists_irq_handler(struct intel_engine_cs *engine, u16 iir)
{",engine->execlists.yield
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/intel_execlists_submission.c,"void virtual_submission_tasklet(struct tasklet_struct *t)
{",sched_engine->queue_priority_hint
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/intel_execlists_submission.c,"void virtual_submit_request(struct i915_request *rq)
{","ve->request,ve->request,ve->request,ve->request,sched_engine->queue_priority_hint,sched_engine->queue_priority_hint"
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/intel_gt_buffer_pool.c,"void pool_retire(struct i915_active *ref)
{",node->age
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/intel_gt_buffer_pool.c,"void intel_gt_buffer_pool_mark_used(struct intel_gt_buffer_pool_node *node)
{",node->age
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/selftest_timeline.c,"int bench_sync(void *arg)
{",x
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/selftest_engine_pm.c,"int __measure_timestamps(struct intel_context *ce,
				u64 *dt, u64 *d_ring, u64 *d_ctx)
{","sema[1],sema[2],sema[2]"
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/selftest_lrc.c,"int __lrc_timestamp(const struct lrc_timestamp *arg, bool preempt)
{",arg->ce[0]->lrc_reg_state[CTX_TIMESTAMP]
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/intel_ggtt_fencing.c,"int fence_update(struct i915_fence_reg *fence,
			struct i915_vma *vma)
{",fence->vma
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/intel_ggtt_fencing.c,"void i915_vma_revoke_fence(struct i915_vma *vma)
{",fence->vma
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/selftest_engine_heartbeat.c,"int __live_heartbeat_fast(struct intel_engine_cs *engine)
{",engine->heartbeat.systole
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/selftest_execlists.c,"int wait_for_reset(struct intel_engine_cs *engine,
			  struct i915_request *rq,
			  unsigned long timeout)
{",rq->fence.error
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/selftest_execlists.c,"int live_preempt_user(void *arg)
{",result[0]
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/uc/intel_guc_ct.c,"int ct_write(struct intel_guc_ct *ct,
		    const u32 *action,
		    u32 len /* in dwords */,
		    u32 fence, u32 flags)
{","desc->tail,desc->tail,desc->head,desc->head"
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gt/uc/intel_guc_ct.c,"int ct_read(struct intel_guc_ct *ct, struct ct_incoming_msg **msg)
{","desc->tail,desc->head,desc->head"
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gem/i915_gem_mman.c,"int singleton_release(struct inode *inode, struct file *file)
{",i915->gem.mmap_singleton
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/i915/gem/i915_gem_pages.c,"void __i915_gem_object_release_map(struct drm_i915_gem_object *obj)
{","iter->sg_idx,iter->sg_idx"
https://elixir.bootlin.com/linux/v6.6/source/drivers/gpu/drm/vmwgfx/vmwgfx_drv.c,"int vmwgfx_pm_notifier(struct notifier_block *nb, unsigned long val,
			      void *ptr)
{","dev_priv->suspend_locked,dev_priv->suspend_locked"
https://elixir.bootlin.com/linux/v6.6/source/drivers/hwmon/bt1-pvt.c,"irqreturn_t pvt_soft_isr(int irq, void *data)
{","cache->thres_sts_hi,cache->thres_sts_lo"
https://elixir.bootlin.com/linux/v6.6/source/drivers/mmc/core/queue.c,"blk_status_t mmc_mq_queue_rq(struct blk_mq_hw_ctx *hctx,
				    const struct blk_mq_queue_data *bd)
{","mq->busy,mq->busy,mq->busy"
https://elixir.bootlin.com/linux/v6.6/source/io_uring/io_uring.c,"bool io_fill_cqe_aux(struct io_ring_ctx *ctx, u64 user_data, s32 res,
			      u32 cflags)
{","cqe->res,cqe->res,cqe->res,cqe->flags,cqe->flags,cqe->flags,cqe->user_data,cqe->user_data,cqe->user_data"
https://elixir.bootlin.com/linux/v6.6/source/io_uring/io_uring.c,"int io_register_enable_rings(struct io_ring_ctx *ctx)
{",ctx->submitter_task
https://elixir.bootlin.com/linux/v6.6/source/io_uring/rw.c,"int io_do_iopoll(struct io_ring_ctx *ctx, bool force_nonspin)
{",req->iopoll_completed
https://elixir.bootlin.com/linux/v6.6/source/io_uring/msg_ring.c,"int io_msg_exec_remote(struct io_kiocb *req, task_work_func_t func)
{",ctx->submitter_task
https://elixir.bootlin.com/linux/v6.6/source/io_uring/timeout.c,"int io_timeout_remove_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)
{",sqe->addr
https://elixir.bootlin.com/linux/v6.6/source/io_uring/notif.c,"void io_tx_ubuf_callback_ext(struct sk_buff *skb, struct ubuf_info *uarg,
			     bool success)
{","nd->zc_used,nd->zc_copied"
https://elixir.bootlin.com/linux/v6.6/source/io_uring/net.c,"int io_sendmsg_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)
{","sqe->addr,sqe->addr2"
https://elixir.bootlin.com/linux/v6.6/source/io_uring/net.c,"int io_recvmsg_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)
{",sqe->addr
https://elixir.bootlin.com/linux/v6.6/source/io_uring/net.c,"int io_send_zc_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)
{","sqe->addr,sqe->addr2"
https://elixir.bootlin.com/linux/v6.6/source/net/socket.c,"void __sock_release(struct socket *sock, struct inode *inode)
{",sock->ops
https://elixir.bootlin.com/linux/v6.6/source/net/socket.c,"int __sys_listen(int fd, int backlog)
{",sock->ops
https://elixir.bootlin.com/linux/v6.6/source/net/tls/tls_sw.c,"int tls_sw_sendmsg_locked(struct sock *sk, struct msghdr *msg,
				 size_t size)
{",ctx->async_notify
https://elixir.bootlin.com/linux/v6.6/source/net/tls/tls_sw.c,"void tls_sw_splice_eof(struct socket *sock)
{",ctx->async_notify
https://elixir.bootlin.com/linux/v6.6/source/net/tls/tls_sw.c,"int tls_rx_reader_acquire(struct sock *sk, struct tls_sw_context_rx *ctx,
				 bool nonblock)
{",ctx->reader_present
https://elixir.bootlin.com/linux/v6.6/source/net/mpls/af_mpls.c,"int mpls_ifdown(struct net_device *dev, int event)
{","nh->nh_flags,nh->nh_flags"
https://elixir.bootlin.com/linux/v6.6/source/net/mpls/af_mpls.c,"void mpls_ifup(struct net_device *dev, unsigned int flags)
{",nh->nh_flags
https://elixir.bootlin.com/linux/v6.6/source/net/xdp/xsk.c,"void xsk_unbind_dev(struct xdp_sock *xs)
{",xs->state
https://elixir.bootlin.com/linux/v6.6/source/net/xdp/xsk.c,"int xsk_bind(struct socket *sock, struct sockaddr *addr, int addr_len)
{","xs->state,xs->umem,xs->umem,xs->umem,xs->umem"
https://elixir.bootlin.com/linux/v6.6/source/net/xdp/xsk.c,"int xsk_setsockopt(struct socket *sock, int level, int optname,
			  sockptr_t optval, unsigned int optlen)
{",xs->umem
https://elixir.bootlin.com/linux/v6.6/source/net/netlink/af_netlink.c,"int netlink_insert(struct sock *sk, u32 portid)
{","nlk_sk(sk,nlk_sk(sk"
https://elixir.bootlin.com/linux/v6.6/source/net/netlink/af_netlink.c,"int netlink_dump(struct sock *sk)
{",nlk->cb_running
https://elixir.bootlin.com/linux/v6.6/source/net/netlink/af_netlink.c,"int __netlink_dump_start(struct sock *ssk, struct sk_buff *skb,
			 const struct nlmsghdr *nlh,
			 struct netlink_dump_control *control)
{",nlk->cb_running
https://elixir.bootlin.com/linux/v6.6/source/net/netlink/af_netlink.c,"void netlink_ack(struct sk_buff *in_skb, struct nlmsghdr *nlh, int err,
		 const struct netlink_ext_ack *extack)
{","NETLINK_CB(in_skb,NETLINK_CB(in_skb,NETLINK_CB(in_skb"
https://elixir.bootlin.com/linux/v6.6/source/net/netfilter/core.c,"bool nf_remove_net_hook(struct nf_hook_entries *old,
			       const struct nf_hook_ops *unreg)
{",orig_ops[i]
https://elixir.bootlin.com/linux/v6.6/source/net/netfilter/nf_conntrack_extend.c,"int total_extension_size(void)
{",ext->gen_id
https://elixir.bootlin.com/linux/v6.6/source/net/netfilter/nf_conntrack_proto_udp.c,"int nf_conntrack_udp_packet(struct nf_conn *ct,
			    struct sk_buff *skb,
			    unsigned int dataoff,
			    enum ip_conntrack_info ctinfo,
			    const struct nf_hook_state *state)
{",ct->status
https://elixir.bootlin.com/linux/v6.6/source/net/netfilter/nf_conntrack_core.c,"bool nf_conntrack_double_lock(struct net *net, unsigned int h1,
				     unsigned int h2, unsigned int sequence)
{",nf_conntrack_locks_all
https://elixir.bootlin.com/linux/v6.6/source/net/netfilter/nf_conntrack_core.c,"bool nf_ct_ext_valid_post(struct nf_ct_ext *ext)
{",ext->gen_id
https://elixir.bootlin.com/linux/v6.6/source/net/netfilter/nf_conntrack_proto_gre.c,"int nf_conntrack_gre_packet(struct nf_conn *ct,
			    struct sk_buff *skb,
			    unsigned int dataoff,
			    enum ip_conntrack_info ctinfo,
			    const struct nf_hook_state *state)
{",ct->status
https://elixir.bootlin.com/linux/v6.6/source/net/netfilter/nf_tables_api.c,"int nf_tables_dump_obj(struct sk_buff *skb, struct netlink_callback *cb)
{",nft_net->base_seq
https://elixir.bootlin.com/linux/v6.6/source/net/netfilter/nf_tables_api.c,"int nf_tables_commit(struct net *net, struct sk_buff *skb)
{",nft_net->base_seq
https://elixir.bootlin.com/linux/v6.6/source/net/netfilter/nf_conncount.c,"bool nf_conncount_gc_list(struct net *net,
			  struct nf_conncount_list *list)
{",list->last_gc
https://elixir.bootlin.com/linux/v6.6/source/net/netfilter/ipvs/ip_vs_est.c,"int ip_vs_estimation_kthread(void *data)
{",kd->est_row
https://elixir.bootlin.com/linux/v6.6/source/net/kcm/kcmsock.c,"void kcm_rcv_ready(struct kcm_sock *kcm)
{",kcm->rx_wait
https://elixir.bootlin.com/linux/v6.6/source/net/kcm/kcmsock.c,"void kcm_recv_disable(struct kcm_sock *kcm)
{",kcm->rx_wait
https://elixir.bootlin.com/linux/v6.6/source/net/kcm/kcmsock.c,"void kcm_done(struct kcm_sock *kcm)
{","kcm->rx_wait,kcm->rx_wait"
https://elixir.bootlin.com/linux/v6.6/source/net/packet/af_packet.c,"void __packet_set_status(struct packet_sock *po, void *frame, int status)
{","h.h2->tp_status,h.h1->tp_status,h.h3->tp_status"
https://elixir.bootlin.com/linux/v6.6/source/net/packet/af_packet.c,"int __packet_get_status(const struct packet_sock *po, void *frame)
{","h.h2->tp_status,h.h1->tp_status,h.h3->tp_status"
https://elixir.bootlin.com/linux/v6.6/source/net/packet/af_packet.c,"int fanout_add(struct sock *sk, struct fanout_args *args)
{","po->fanout,po->fanout,po->fanout"
https://elixir.bootlin.com/linux/v6.6/source/net/packet/af_packet.c,"int packet_do_bind(struct sock *sk, const char *name, int ifindex,
			  __be16 proto)
{",po->num
https://elixir.bootlin.com/linux/v6.6/source/net/packet/af_packet.c,"int packet_recvmsg(struct socket *sock, struct msghdr *msg, size_t len,
			  int flags)
{","pkt_sk(sk,pkt_sk(sk,pkt_sk(sk"
https://elixir.bootlin.com/linux/v6.6/source/net/packet/af_packet.c,"int packet_notifier(struct notifier_block *this,
			   unsigned long msg, void *ptr)
{","po->ifindex,po->ifindex"
https://elixir.bootlin.com/linux/v6.6/source/net/packet/af_packet.c,"int packet_set_ring(struct sock *sk, union tpacket_req_u *req_u,
		int closing, int tx_ring)
{",po->num
https://elixir.bootlin.com/linux/v6.6/source/net/sched/cls_api.c,"int tc_setup_cb_call(struct tcf_block *block, enum tc_setup_type type,
		     void *type_data, bool err_stop, bool rtnl_held)
{",block->lockeddevcnt
https://elixir.bootlin.com/linux/v6.6/source/net/sched/cls_api.c,"int tc_setup_cb_add(struct tcf_block *block, struct tcf_proto *tp,
		    enum tc_setup_type type, void *type_data, bool err_stop,
		    u32 *flags, unsigned int *in_hw_count, bool rtnl_held)
{",block->lockeddevcnt
https://elixir.bootlin.com/linux/v6.6/source/net/sched/cls_api.c,"int tc_setup_cb_replace(struct tcf_block *block, struct tcf_proto *tp,
			enum tc_setup_type type, void *type_data, bool err_stop,
			u32 *old_flags, unsigned int *old_in_hw_count,
			u32 *new_flags, unsigned int *new_in_hw_count,
			bool rtnl_held)
{",block->lockeddevcnt
https://elixir.bootlin.com/linux/v6.6/source/net/sched/cls_api.c,"int tc_setup_cb_destroy(struct tcf_block *block, struct tcf_proto *tp,
			enum tc_setup_type type, void *type_data, bool err_stop,
			u32 *flags, unsigned int *in_hw_count, bool rtnl_held)
{",block->lockeddevcnt
https://elixir.bootlin.com/linux/v6.6/source/net/sched/sch_generic.c,"int pfifo_fast_enqueue(struct sk_buff *skb, struct Qdisc *qdisc,
			      struct sk_buff **to_free)
{","qdisc->state,qdisc->state"
https://elixir.bootlin.com/linux/v6.6/source/net/sched/em_meta.c,"int var_dev(struct net_device *dev, struct meta_obj *dst)
{",skb->sk->sk_bound_dev_if
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/addrconf.c,"void addrconf_sysctl_unregister(struct inet6_dev *idev)
{",idev->cnf.temp_prefered_lft
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/route.c,"void rt6_probe(struct fib6_nh *fib6_nh)
{",neigh->nud_state
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/syncookies.c,"int __cookie_v6_check(const struct ipv6hdr *iph, const struct tcphdr *th,
		      __u32 cookie)
{","sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/datagram.c,"int __ip6_datagram_connect(struct sock *sk, struct sockaddr *uaddr,
			   int addr_len)
{","sk->sk_bound_dev_if,sk->sk_bound_dev_if"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/tcp_ipv6.c,"int tcp_v6_connect(struct sock *sk, struct sockaddr *uaddr,
			  int addr_len)
{",tp->write_seq
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/tcp_ipv6.c,"void tcp_v6_mtu_reduced(struct sock *sk)
{",tcp_sk(sk
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/tcp_ipv6.c,"int tcp_v6_err(struct sk_buff *skb, struct inet6_skb_parm *opt,
		u8 type, u8 code, int offset, __be32 info)
{",tcp_inet6_sk(sk
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/tcp_ipv6.c,"void tcp_v6_reqsk_send_ack(const struct sock *sk, struct sk_buff *skb,
				  struct request_sock *req)
{","tcp_rsk(req,tcp_rsk(req,tcp_rsk(req"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/tcp_ipv6.c,"void tcp_v6_restore_cb(struct sk_buff *skb)
{","sock_net(sk,sock_net(sk"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/ip6_tunnel.c,"void ip6_tnl_link_config(struct ip6_tnl *t)
{",dev->mtu
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/ip6mr.c,"int mif6_delete(struct mr_table *mrt, int vifi, int notify,
		       struct list_head *head)
{","mrt->mroute_reg_vif_num,mrt->maxvif,mrt->maxvif"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/ip6mr.c,"int mif6_add(struct net *net, struct mr_table *mrt,
		    struct mif6ctl *vifc, int mrtsock)
{","mrt->mroute_reg_vif_num,mrt->maxvif"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/ip6_gre.c,"void ip6gre_tunnel_uninit(struct net_device *dev)
{",ign->fb_tunnel_dev
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/ip6_gre.c,"void ip6gre_tnl_link_config_route(struct ip6_tnl *t, int set_mtu,
					 int t_hlen)
{",dev->mtu
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/ipv6_sockglue.c,"int do_ipv6_setsockopt(struct sock *sk, int level, int optname,
		       sockptr_t optval, unsigned int optlen)
{","sk->sk_family,sk->sk_prot,sk->sk_prot,sk->sk_prot,sk->sk_prot,sk->sk_prot,sk->sk_prot,sk->sk_prot,sk->sk_prot"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv6/sit.c,"void ipip6_tunnel_bind_dev(struct net_device *dev)
{",dev->mtu
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_input.c,"void tcp_sndbuf_expand(struct sock *sk)
{",sk->sk_sndbuf
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_input.c,"void tcp_clamp_window(struct sock *sk)
{","sk->sk_rcvbuf,sk->sk_rcvbuf"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_input.c,"void tcp_rcv_space_adjust(struct sock *sk)
{",sk->sk_rcvbuf
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_input.c,"void tcp_check_sack_reordering(struct sock *sk, const u32 low_seq,
				      const int ts)
{",sock_net(sk
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_input.c,"void tcp_check_reno_reordering(struct sock *sk, const int addend)
{",sock_net(sk
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_input.c,"void tcp_rcv_nxt_update(struct tcp_sock *tp, u32 seq)
{",tp->rcv_nxt
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_input.c,"void tcp_fin(struct sock *sk)
{",sk->sk_shutdown
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_input.c,"void tcp_dsack_set(struct sock *sk, u32 seq, u32 end_seq)
{",sock_net(sk
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_input.c,"void tcp_send_dupack(struct sock *sk, const struct sk_buff *skb)
{",sock_net(sk
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_input.c,"void tcp_check_urg(struct sock *sk, const struct tcphdr *th)
{","tp->urg_seq,tp->urg_seq,tp->urg_data,tp->urg_data"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_input.c,"void tcp_urg(struct sock *sk, struct sk_buff *skb, const struct tcphdr *th)
{",tp->urg_data
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_input.c,"int tcp_rcv_state_process(struct sock *sk, struct sk_buff *skb)
{",sk->sk_shutdown
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_input.c,"u16 tcp_get_syncookie_mss(struct request_sock_ops *rsk_ops,
			  const struct tcp_request_sock_ops *af_ops,
			  struct sock *sk, struct tcphdr *th)
{",sock_net(sk
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_dctcp.c,"void dctcp_update_alpha(struct sock *sk, u32 flags)
{",ca->dctcp_alpha
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_fastopen.c,"bool tcp_fastopen_no_cookie(const struct sock *sk,
				   const struct dst_entry *dst,
				   int flag)
{","sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_fastopen.c,"bool tcp_fastopen_active_should_disable(struct sock *sk)
{",sock_net(sk
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/ip_tunnel.c,"void ip_tunnel_uninit(struct net_device *dev)
{",itn->fb_tunnel_dev
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/inetpeer.c,"void inet_peer_gc(struct inet_peer_base *base,
			 struct inet_peer *gc_stack[],
			 unsigned int gc_cnt)
{",p->dtime
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/af_inet.c,"int __inet_listen_sk(struct sock *sk, int backlog)
{",sock_net(sk
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/af_inet.c,"int inet_sk_rebuild_header(struct sock *sk)
{",sock_net(sk
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp.c,"__poll_t tcp_poll(struct file *file, struct socket *sock, poll_table *wait)
{",sk->sk_err
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp.c,"int tcp_recv_urg(struct sock *sk, struct msghdr *msg, int len, int flags)
{","tp->urg_data,tp->urg_data,tp->urg_data,tp->urg_data"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp.c,"int tcp_read_sock(struct sock *sk, read_descriptor_t *desc,
		  sk_read_actor_t recv_actor)
{",tp->copied_seq
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp.c,"void tcp_read_done(struct sock *sk, size_t len)
{",tp->copied_seq
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp.c,"int tcp_set_rcvlowat(struct sock *sk, int val)
{","sk->sk_rcvbuf,sk->sk_rcvbuf"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp.c,"int tcp_zerocopy_receive(struct sock *sk,
				struct tcp_zerocopy_receive *zc,
				struct scm_timestamping_internal *tss)
{",tp->copied_seq
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp.c,"int tcp_inq_hint(struct sock *sk)
{","tp->rcv_nxt,tp->copied_seq"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp.c,"int tcp_recvmsg_locked(struct sock *sk, struct msghdr *msg, size_t len,
			      int flags, struct scm_timestamping_internal *tss,
			      int *cmsg_flags)
{","tp->urg_data,tp->urg_data"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp.c,"int tcp_disconnect(struct sock *sk, int flags)
{","tp->write_seq,tp->write_seq"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp.c,"int tcp_sock_set_keepidle_locked(struct sock *sk, int val)
{","tp->keepalive_time,tp->keepalive_time"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp.c,"int do_tcp_setsockopt(struct sock *sk, int level, int optname,
		      sockptr_t optval, unsigned int optlen)
{","tp->copied_seq,tp->rcv_nxt"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp.c,"bool tcp_alloc_md5sig_pool(void)
{",tcp_md5sig_pool_populated
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/syncookies.c,"bool cookie_ecn_ok(const struct tcp_options_received *tcp_opt,
		   const struct net *net, const struct dst_entry *dst)
{","sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_output.c,"int tcp_send_synack(struct sock *sk)
{","tcp_rsk(req,tcp_rsk(req,tcp_rsk(req,tcp_rsk(req,tcp_rsk(req"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_minisocks.c,"tcp_tw_status
tcp_timewait_state_process(struct inet_timewait_sock *tw, struct sk_buff *skb,
			   const struct tcphdr *th)
{","twsk_net(tw,twsk_net(tw"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_minisocks.c,"void smc_check_reset_syn_req(const struct tcp_sock *oldtp,
				    struct request_sock *req,
				    struct tcp_sock *newtp)
{","inet_csk(sk,sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_bpf.c,"void tcp_eat_skb(struct sock *sk, struct sk_buff *skb)
{",tcp->copied_seq
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_bpf.c,"int tcp_bpf_recvmsg_parser(struct sock *sk,
				  struct msghdr *msg,
				  size_t len,
				  int flags,
				  int *addr_len)
{",tcp->copied_seq
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/inet_connection_sock.c,"void inet_child_forget(struct sock *sk, struct request_sock *req,
			      struct sock *child)
{",queue->rskq_accept_head
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/fib_semantics.c,"bool fib_valid_prefsrc(struct fib_config *cfg, __be32 fib_prefsrc)
{",fib_info_cnt
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/icmp.c,"bool icmp_global_allow(void)
{","icmp_global.credit,icmp_global.stamp"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_ipv4.c,"int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
{",tp->write_seq
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_ipv4.c,"void tcp_v4_reqsk_send_ack(const struct sock *sk, struct sk_buff *skb,
				  struct request_sock *req)
{","tcp_rsk(req,tcp_rsk(req,tcp_rsk(req"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_ipv4.c,"int __tcp_md5_do_add(struct sock *sk, const union tcp_md5_addr *addr,
			    int family, u8 prefixlen, int l3index, u8 flags,
			    const u8 *newkey, u8 newkeylen, gfp_t gfp)
{",key->keylen
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/tcp_ipv4.c,"int tcp_v4_conn_request(struct sock *sk, struct sk_buff *skb)
{","sock_net(sk,sock_net(sk"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/ipmr.c,"int vif_delete(struct mr_table *mrt, int vifi, int notify,
		      struct list_head *head)
{","mrt->mroute_reg_vif_num,mrt->maxvif,mrt->maxvif"
https://elixir.bootlin.com/linux/v6.6/source/net/ipv4/ipmr.c,"int vif_add(struct net *net, struct mr_table *mrt,
		   struct vifctl *vifc, int mrtsock)
{","mrt->mroute_reg_vif_num,mrt->maxvif"
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/pm.c,"void mptcp_pm_mp_fail_received(struct sock *sk, u64 fail_seq)
{",subflow->fail_tout
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/pm.c,"bool mptcp_pm_add_addr_signal(struct mptcp_sock *msk, const struct sk_buff *skb,
			      unsigned int opt_size, unsigned int remaining,
			      struct mptcp_addr_info *addr, bool *echo,
			      bool *drop_other_suboptions)
{","msk->pm.addr_signal,msk->pm.addr_signal"
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/pm.c,"bool mptcp_pm_rm_addr_signal(struct mptcp_sock *msk, unsigned int remaining,
			     struct mptcp_rm_list *rm_list)
{",msk->pm.addr_signal
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"int __mptcp_socket_create(struct mptcp_sock *msk)
{","msk->first,msk->first,msk->first,msk->first"
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"void mptcp_rmem_fwd_alloc_add(struct sock *sk, int size)
{",mptcp_sk(sk
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"bool __mptcp_move_skb(struct mptcp_sock *msk, struct sock *ssk,
			     struct sk_buff *skb, unsigned int offset,
			     size_t copy_len)
{","msk->ack_seq,msk->ack_seq"
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"bool __mptcp_move_skbs_from_subflow(struct mptcp_sock *msk,
					   struct sock *ssk,
					   unsigned int *bytes)
{",tp->copied_seq
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"void __mptcp_clean_una(struct sock *sk)
{",msk->first_pending
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"int mptcp_sendmsg_frag(struct sock *sk, struct sock *ssk,
			      struct mptcp_data_frag *dfrag,
			      struct mptcp_sendmsg_info *info)
{","tcp_sk(ssk,tcp_sk(ssk"
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"int mptcp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
{",msk->first_pending
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"void mptcp_rcv_space_adjust(struct mptcp_sock *msk, int copied)
{",sk->sk_rcvbuf
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"void __mptcp_update_rmem(struct sock *sk)
{","msk->rmem_released,msk->rmem_released,msk->rmem_released"
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"void __mptcp_close_ssk(struct sock *sk, struct sock *ssk,
			      struct mptcp_subflow_context *subflow,
			      unsigned int flags)
{","msk->first,msk->first,msk->first,msk->first,msk->first"
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"void mptcp_subflow_shutdown(struct sock *sk, struct sock *ssk, int how)
{","mptcp_sk(sk,mptcp_sk(sk"
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"void mptcp_check_send_data_fin(struct sock *sk)
{","msk->snd_nxt,msk->snd_nxt"
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"void __mptcp_wr_shutdown(struct sock *sk)
{",msk->snd_data_fin_enable
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"int mptcp_disconnect(struct sock *sk, int flags)
{",msk->fully_established
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"void mptcp_destroy_common(struct mptcp_sock *msk, unsigned int flags)
{",msk->rmem_fwd_alloc
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/protocol.c,"int mptcp_stream_accept(struct socket *sock, struct socket *newsock,
			       int flags, bool kern)
{","msk->first,msk->first,msk->first"
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/token.c,"void mptcp_token_destroy(struct mptcp_sock *msk)
{","msk->token,msk->token"
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/subflow.c,"void mptcp_subflow_fail(struct mptcp_sock *msk, struct sock *ssk)
{",subflow->fail_tout
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/subflow.c,"bool subflow_check_data_avail(struct sock *ssk)
{",subflow->data_avail
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/sockopt.c,"void mptcp_sockopt_sync(struct mptcp_sock *msk, struct sock *ssk)
{",subflow->setsockopt_seq
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/sockopt.c,"void mptcp_sockopt_sync_locked(struct mptcp_sock *msk, struct sock *ssk)
{",subflow->setsockopt_seq
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/pm_netlink.c,"int mptcp_pm_nl_append_new_local_addr(struct pm_nl_pernet *pernet,
					     struct mptcp_pm_addr_entry *entry)
{","pernet->add_addr_signal_max,pernet->local_addr_max"
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/pm_netlink.c,"int mptcp_nl_cmd_del_addr(struct sk_buff *skb, struct genl_info *info)
{","pernet->add_addr_signal_max,pernet->local_addr_max"
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/pm_netlink.c,"int
mptcp_nl_cmd_set_limits(struct sk_buff *skb, struct genl_info *info)
{","pernet->subflows_max,pernet->add_addr_accept_max"
https://elixir.bootlin.com/linux/v6.6/source/net/mptcp/options.c,"void mptcp_set_rwin(struct tcp_sock *tp, struct tcphdr *th)
{","sock_net(ssk,sock_net(ssk,sock_net(ssk"
https://elixir.bootlin.com/linux/v6.6/source/net/dccp/proto.c,"int dccp_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)
{",dp->dccps_mss_cache
https://elixir.bootlin.com/linux/v6.6/source/net/dccp/ipv6.c,"int dccp_v6_conn_request(struct sock *sk, struct sk_buff *skb)
{",sk->sk_bound_dev_if
https://elixir.bootlin.com/linux/v6.6/source/net/core/stream.c,"int sk_stream_wait_connect(struct sock *sk, long *timeo_p)
{",sk->sk_state
https://elixir.bootlin.com/linux/v6.6/source/net/core/stream.c,"int sk_stream_wait_memory(struct sock *sk, long *timeo_p)
{","sk->sk_shutdown,sk->sk_err"
https://elixir.bootlin.com/linux/v6.6/source/net/core/neighbour.c,"void neigh_timer_handler(struct timer_list *t)
{","neigh->nud_state,neigh->nud_state,neigh->nud_state,neigh->nud_state"
https://elixir.bootlin.com/linux/v6.6/source/net/core/neighbour.c,"int __neigh_event_send(struct neighbour *neigh, struct sk_buff *skb,
		       const bool immediate_ok)
{","neigh->nud_state,neigh->nud_state,neigh->nud_state,neigh->nud_state,neigh->nud_state"
https://elixir.bootlin.com/linux/v6.6/source/net/core/neighbour.c,"int __neigh_update(struct neighbour *neigh, const u8 *lladdr,
			  u8 new, u32 flags, u32 nlmsg_pid,
			  struct netlink_ext_ack *extack)
{","neigh->nud_state,neigh->nud_state"
https://elixir.bootlin.com/linux/v6.6/source/net/core/neighbour.c,"void __neigh_set_probe_once(struct neighbour *neigh)
{",neigh->nud_state
https://elixir.bootlin.com/linux/v6.6/source/net/core/skbuff.c,"void skb_attempt_defer_free(struct sk_buff *skb)
{","sd->defer_count,sd->defer_list"
https://elixir.bootlin.com/linux/v6.6/source/net/core/sock_reuseport.c,"void reuseport_update_incoming_cpu(struct sock *sk, int val)
{",sk->sk_incoming_cpu
https://elixir.bootlin.com/linux/v6.6/source/net/core/sock_reuseport.c,"void __reuseport_add_closed_sock(struct sock *sk,
					struct sock_reuseport *reuse)
{",reuse->num_closed_socks
https://elixir.bootlin.com/linux/v6.6/source/net/core/sock_reuseport.c,"bool __reuseport_detach_closed_sock(struct sock *sk,
					   struct sock_reuseport *reuse)
{",reuse->num_closed_socks
https://elixir.bootlin.com/linux/v6.6/source/net/core/sock_reuseport.c,"void reuseport_stop_listen_sock(struct sock *sk)
{",sock_net(sk
https://elixir.bootlin.com/linux/v6.6/source/net/core/dev.c,"bool napi_complete_done(struct napi_struct *n, int work_done)
{",n->state
https://elixir.bootlin.com/linux/v6.6/source/net/core/dev.c,"void busy_poll_stop(struct napi_struct *napi, void *have_poll_lock, bool prefer_busy_poll,
			   u16 budget)
{","napi->state,napi->state,napi->state,napi->state"
https://elixir.bootlin.com/linux/v6.6/source/net/core/dev.c,"void napi_disable(struct napi_struct *n)
{","n->state,n->state"
https://elixir.bootlin.com/linux/v6.6/source/net/core/dev.c,"void skb_defer_free_flush(struct softnet_data *sd)
{","sd->defer_list,sd->defer_list"
https://elixir.bootlin.com/linux/v6.6/source/net/core/dev.c,"int netdev_refcnt_read(const struct net_device *dev)
{",netdev_unregister_timeout_secs
https://elixir.bootlin.com/linux/v6.6/source/net/core/filter.c,"u32 bpf_xdp_sock_convert_ctx_access(enum bpf_access_type type,
				    const struct bpf_insn *si,
				    struct bpf_insn *insn_buf,
				    struct bpf_prog *prog, u32 *target_size)
{",sock_net(sk
https://elixir.bootlin.com/linux/v6.6/source/net/core/datagram.c,"__poll_t datagram_poll(struct file *file, struct socket *sock,
			   poll_table *wait)
{",sk->sk_err
https://elixir.bootlin.com/linux/v6.6/source/net/core/sysctl_net_core.c,"void dump_cpumask(void *buffer, size_t *lenp, loff_t *ppos,
			 struct cpumask *mask)
{","net->core.rps_default_mask,net->core.rps_default_mask"
https://elixir.bootlin.com/linux/v6.6/source/net/core/sock_map.c,"int sock_map_link(struct bpf_map *map, struct sock *sk)
{","psock->progs.skb_verdict,psock->progs.msg_parser,psock->progs.stream_verdict,psock->progs.stream_parser"
https://elixir.bootlin.com/linux/v6.6/source/net/core/sock.c,"int __sk_receive_skb(struct sock *sk, struct sk_buff *skb,
		     const int nested, unsigned int trim_cap, bool refcounted)
{",sk->sk_rcvbuf
https://elixir.bootlin.com/linux/v6.6/source/net/core/sock.c,"int sock_bindtoindex_locked(struct sock *sk, int ifindex)
{",sk->sk_bound_dev_if
https://elixir.bootlin.com/linux/v6.6/source/net/core/sock.c,"int sock_set_timestamping(struct sock *sk, int optname,
			  struct so_timestamping timestamping)
{",sk->sk_tsflags
https://elixir.bootlin.com/linux/v6.6/source/net/core/sock.c,"void __sock_set_mark(struct sock *sk, u32 val)
{",sk->sk_mark
https://elixir.bootlin.com/linux/v6.6/source/net/core/sock.c,"void sock_release_reserved_memory(struct sock *sk, int bytes)
{",sk->sk_reserved_mem
https://elixir.bootlin.com/linux/v6.6/source/net/core/sock.c,"int sk_setsockopt(struct sock *sk, int level, int optname,
		  sockptr_t optval, unsigned int optlen)
{","sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk,sock_net(sk"
https://elixir.bootlin.com/linux/v6.6/source/net/core/sock.c,"void sk_init_common(struct sock *sk)
{",sk->sk_prot
https://elixir.bootlin.com/linux/v6.6/source/net/core/page_pool.c,"void page_pool_unlink_napi(struct page_pool *pool)
{","pool->p.napi,pool->p.napi"
https://elixir.bootlin.com/linux/v6.6/source/net/bridge/br_device.c,"int br_fill_forward_path(struct net_device_path_ctx *ctx,
				struct net_device_path *path)
{",f->dst
https://elixir.bootlin.com/linux/v6.6/source/net/bridge/br_multicast.c,"int br_multicast_set_querier(struct net_bridge_mcast *brmctx, unsigned long val)
{",brmctx->multicast_querier
https://elixir.bootlin.com/linux/v6.6/source/net/9p/trans_xen.c,"void p9_xen_response(struct work_struct *work)
{","req->status,req->status"
https://elixir.bootlin.com/linux/v6.6/source/net/9p/trans_fd.c,"int p9_fd_cancel(struct p9_client *client, struct p9_req_t *req)
{",req->status
https://elixir.bootlin.com/linux/v6.6/source/net/9p/trans_fd.c,"int p9_fd_cancelled(struct p9_client *client, struct p9_req_t *req)
{",req->status
https://elixir.bootlin.com/linux/v6.6/source/net/bluetooth/sco.c,"int sco_sock_release(struct socket *sock)
{",sk->sk_lingertime
https://elixir.bootlin.com/linux/v6.6/source/net/bluetooth/iso.c,"int iso_sock_release(struct socket *sock)
{",sk->sk_lingertime
https://elixir.bootlin.com/linux/v6.6/source/net/bluetooth/mgmt.c,"int set_device_flags(struct sock *sk, struct hci_dev *hdev, void *data,
			    u16 len)
{",params->flags
https://elixir.bootlin.com/linux/v6.6/source/net/rxrpc/rxkad.c,"int rxkad_verify_response(struct rxrpc_connection *conn,
				 struct sk_buff *skb)
{",conn->channels[i].call_counter
https://elixir.bootlin.com/linux/v6.6/source/net/rxrpc/input.c,"void rxrpc_complete_rtt_probe(struct rxrpc_call *call,
				     ktime_t resp_time,
				     rxrpc_serial_t acked_serial,
				     rxrpc_serial_t ack_serial,
				     enum rxrpc_rtt_rx_trace type)
{","call->rtt_avail,call->rtt_avail,call->rtt_avail,call->rtt_avail"
https://elixir.bootlin.com/linux/v6.6/source/net/rxrpc/call_event.c,"void rxrpc_propose_ping(struct rxrpc_call *call, u32 serial,
			enum rxrpc_propose_ack_trace why)
{",call->ping_at
https://elixir.bootlin.com/linux/v6.6/source/net/rxrpc/call_event.c,"void rxrpc_propose_delay_ACK(struct rxrpc_call *call, rxrpc_serial_t serial,
			     enum rxrpc_propose_ack_trace why)
{",call->delay_ack_at
https://elixir.bootlin.com/linux/v6.6/source/net/rxrpc/call_event.c,"bool rxrpc_input_call_event(struct rxrpc_call *call, struct sk_buff *skb)
{",call->expect_rx_by
https://elixir.bootlin.com/linux/v6.6/source/net/rxrpc/call_event.c,define set(T) {,T
https://elixir.bootlin.com/linux/v6.6/source/net/smc/smc_tx.c,"int smc_tx_wait(struct smc_sock *smc, int flags)
{","sk->sk_shutdown,sk->sk_err"
https://elixir.bootlin.com/linux/v6.6/source/net/smc/af_smc.c,"void smc_adjust_sock_bufsizes(struct sock *nsk, struct sock *osk,
				     unsigned long mask)
{","nsk->sk_rcvbuf,nsk->sk_sndbuf"
https://elixir.bootlin.com/linux/v6.6/source/net/smc/af_smc.c,"void smc_close_non_accepted(struct sock *sk)
{",sk->sk_lingertime
https://elixir.bootlin.com/linux/v6.6/source/net/unix/garbage.c,"void wait_for_unix_gc(void)
{",gc_in_progress
https://elixir.bootlin.com/linux/v6.6/source/net/unix/garbage.c,"void unix_gc(void)
{",gc_in_progress
https://elixir.bootlin.com/linux/v6.6/source/net/unix/af_unix.c,"int queue_oob(struct socket *sock, struct msghdr *msg, struct sock *other,
		     struct scm_cookie *scm, bool fds_sent)
{","ousk->oob_skb,ousk->oob_skb"
https://elixir.bootlin.com/linux/v6.6/source/net/unix/af_unix.c,"int unix_stream_recv_urg(struct unix_stream_read_state *state)
{","u->oob_skb,u->oob_skb,u->oob_skb"
https://elixir.bootlin.com/linux/v6.6/source/net/unix/af_unix.c,"__poll_t unix_dgram_poll(struct file *file, struct socket *sock,
				    poll_table *wait)
{",sk->sk_err
https://elixir.bootlin.com/linux/v6.6/source/arch/xtensa/kernel/smp.c,"int boot_secondary(unsigned int cpu, struct task_struct *ts)
{","cpu_start_id,cpu_start_id"
https://elixir.bootlin.com/linux/v6.6/source/arch/xtensa/kernel/smp.c,"void __cpu_die(unsigned int cpu)
{","cpu_start_id,cpu_start_id"
https://elixir.bootlin.com/linux/v6.6/source/arch/x86/events/intel/pt.c,"void pt_config_start(struct perf_event *event)
{",event->hw.config
https://elixir.bootlin.com/linux/v6.6/source/arch/x86/events/intel/pt.c,"long pt_event_snapshot_aux(struct perf_event *event,
				  struct perf_output_handle *handle,
				  unsigned long size)
{",pt->handle_nmi
https://elixir.bootlin.com/linux/v6.6/source/arch/x86/kernel/smpboot.c,"void mwait_play_dead(void)
{","md->status,md->control"
https://elixir.bootlin.com/linux/v6.6/source/arch/x86/kernel/smpboot.c,"int native_cpu_disable(void)
{","md->status,md->control"
https://elixir.bootlin.com/linux/v6.6/source/arch/x86/kernel/reboot.c,"void nmi_shootdown_cpus(nmi_shootdown_cb callback)
{","crash_ipi_issued,crash_ipi_issued"
https://elixir.bootlin.com/linux/v6.6/source/arch/x86/kernel/shstk.c,"int create_rstor_token(unsigned long ssp, unsigned long *token_addr)
{","ssp,ssp,ssp"
https://elixir.bootlin.com/linux/v6.6/source/arch/x86/kernel/fpu/core.c,"void fpu_init_guest_permissions(struct fpu_guest *gfpu)
{",fpuperm->__state_perm
https://elixir.bootlin.com/linux/v6.6/source/arch/x86/kernel/cpu/resctrl/rdtgroup.c,"int __rdtgroup_move_task(struct task_struct *tsk,
				struct rdtgroup *rdtgrp)
{","tsk->closid,tsk->closid,tsk->closid,tsk->rmid,tsk->rmid"
https://elixir.bootlin.com/linux/v6.6/source/arch/x86/kernel/acpi/boot.c,"int acpi_wakeup_cpu(int apicid, unsigned long start_ip)
{",acpi_mp_wake_mailbox->command
https://elixir.bootlin.com/linux/v6.6/source/arch/x86/xen/p2m.c,"int xen_alloc_p2m_entry(unsigned long pfn)
{",p2m_top_mfn_p[topidx]
https://elixir.bootlin.com/linux/v6.6/source/arch/x86/platform/efi/quirks.c,"void efi_crash_gracefully_on_page_fault(unsigned long phys_addr)
{",efi_rts_work.efi_rts_id
https://elixir.bootlin.com/linux/v6.6/source/arch/x86/kvm/cpuid.c,"void kvm_set_cpu_caps(void)
{",max_cpuid_80000000
https://elixir.bootlin.com/linux/v6.6/source/arch/x86/kvm/mmu/mmu.c,"int mmu_try_to_unsync_pages(struct kvm *kvm, const struct kvm_memory_slot *slot,
			    gfn_t gfn, bool can_unsync, bool prefetch)
{",sp->unsync
https://elixir.bootlin.com/linux/v6.6/source/arch/powerpc/kernel/irq_64.c,"void arch_local_irq_restore(unsigned long mask)
{","local_paca->irq_happened,local_paca->irq_happened,local_paca->irq_happened,local_paca->irq_happened"
https://elixir.bootlin.com/linux/v6.6/source/arch/powerpc/kvm/book3s_xics.c,"void kvmppc_h_cppr(struct kvm_vcpu *vcpu, unsigned long cppr)
{","icp->state,icp->state"
https://elixir.bootlin.com/linux/v6.6/source/arch/powerpc/kvm/book3s_hv_rm_xics.c,"int xics_rm_h_cppr(struct kvm_vcpu *vcpu, unsigned long cppr)
{","icp->state,icp->state"
https://elixir.bootlin.com/linux/v6.6/source/arch/powerpc/lib/qspinlock.c,"bool yield_to_prev(struct qspinlock *lock, struct qnode *node, u32 val, bool paravirt)
{",node->yield_cpu
https://elixir.bootlin.com/linux/v6.6/source/arch/powerpc/lib/qspinlock.c,"void queued_spin_lock_mcs_queue(struct qspinlock *lock, bool paravirt)
{","node->next,node->locked"
https://elixir.bootlin.com/linux/v6.6/source/arch/riscv/kvm/mmu.c,"void kvm_riscv_gstage_free_pgd(struct kvm *kvm)
{","kvm->arch.pgd,kvm->arch.pgd"
https://elixir.bootlin.com/linux/v6.6/source/arch/s390/kernel/vtime.c,"int do_account_vtime(struct task_struct *tsk)
{","S390_lowcore.system_timer,S390_lowcore.hardirq_timer"
https://elixir.bootlin.com/linux/v6.6/source/arch/s390/kernel/time.c,"int stp_sync_clock(void *data)
{","sync->in_sync,sync->in_sync"
https://elixir.bootlin.com/linux/v6.6/source/arch/s390/mm/gmap.c,"int s390_replace_asce(struct gmap *gmap)
{","gmap->asce,gmap->asce,gmap->table"
https://elixir.bootlin.com/linux/v6.6/source/arch/s390/kvm/vsie.c,"void prepare_ibc(struct kvm_vcpu *vcpu, struct vsie_page *vsie_page)
{",__new_ibc
https://elixir.bootlin.com/linux/v6.6/source/arch/s390/kvm/vsie.c,"int shadow_scb(struct kvm_vcpu *vcpu, struct vsie_page *vsie_page)
{","scb_o->ecb,scb_o->ecb,scb_o->ecb,scb_o->ecb,scb_o->ecb,scb_o->ecb,__new_prefix"
https://elixir.bootlin.com/linux/v6.6/source/arch/s390/kvm/vsie.c,"void release_gmap_shadow(struct vsie_page *vsie_page)
{","vsie_page->gmap,vsie_page->gmap"
https://elixir.bootlin.com/linux/v6.6/source/arch/s390/kvm/vsie.c,"int acquire_gmap_shadow(struct kvm_vcpu *vcpu,
			       struct vsie_page *vsie_page)
{","vsie_page->gmap,vsie_page->gmap"
https://elixir.bootlin.com/linux/v6.6/source/arch/s390/lib/spinlock.c,"void arch_spin_lock_queued(arch_spinlock_t *lp)
{","node->next,node->prev,node->prev"
https://elixir.bootlin.com/linux/v6.6/source/arch/s390/lib/spinlock.c,"void arch_spin_lock_classic(arch_spinlock_t *lp)
{",lp->lock
https://elixir.bootlin.com/linux/v6.6/source/arch/s390/lib/spinlock.c,"void arch_read_lock_wait(arch_rwlock_t *rw)
{","rw->cnts,rw->cnts"
https://elixir.bootlin.com/linux/v6.6/source/arch/s390/lib/spinlock.c,"void arch_write_lock_wait(arch_rwlock_t *rw)
{",rw->cnts
https://elixir.bootlin.com/linux/v6.6/source/arch/s390/lib/test_unwind.c,"int test_unwind_ftraced_func(struct unwindme *u)
{",u
https://elixir.bootlin.com/linux/v6.6/source/arch/s390/lib/test_unwind.c,"void unwindme_timer_fn(struct timer_list *unused)
{",unwindme
https://elixir.bootlin.com/linux/v6.6/source/arch/arm64/kernel/armv8_deprecated.c,"int emulation_proc_handler(struct ctl_table *table, int write,
				  void *buffer, size_t *lenp,
				  loff_t *ppos)
{","insn->current_mode,insn->current_mode"
https://elixir.bootlin.com/linux/v6.6/source/arch/arm64/kvm/hyp/nvhe/pkvm.c,"int init_pkvm_hyp_vcpu(struct pkvm_hyp_vcpu *hyp_vcpu,
			      struct pkvm_hyp_vm *hyp_vm,
			      struct kvm_vcpu *host_vcpu,
			      unsigned int vcpu_idx)
{",host_vcpu->vcpu_id
https://elixir.bootlin.com/linux/v6.6/source/arch/arm64/net/bpf_jit_comp.c,"int bpf_arch_text_poke(void *ip, enum bpf_text_poke_type poke_type,
		       void *old_addr, void *new_addr)
{","plt->target,plt->target"
https://elixir.bootlin.com/linux/v6.6/source/arch/m68k/virt/ints.c,"irqreturn_t virt_nmi_handler(int irq, void *dev_id)
{",in_nmi
https://elixir.bootlin.com/linux/v6.6/source/ipc/msg.c,"void free_copy(struct msg_msg *copy)
{",msr_d.r_msg
https://elixir.bootlin.com/linux/v6.6/source/ipc/sem.c,"void complexmode_enter(struct sem_array *sma)
{",sma->use_global_lock
https://elixir.bootlin.com/linux/v6.6/source/ipc/sem.c,"void complexmode_tryleave(struct sem_array *sma)
{","sma->use_global_lock,sma->use_global_lock"
https://elixir.bootlin.com/linux/v6.6/source/ipc/sem.c,"int sem_lock(struct sem_array *sma, struct sembuf *sops,
			      int nsops)
{","sma->use_global_lock,sma->use_global_lock"
https://elixir.bootlin.com/linux/v6.6/source/fs/namespace.c,"void mount_setattr_commit(struct mount_kattr *kattr, struct mount *mnt)
{",m->mnt.mnt_flags
https://elixir.bootlin.com/linux/v6.6/source/fs/dax.c,"dax_entry_t dax_lock_page(struct page *page)
{",page->mapping
https://elixir.bootlin.com/linux/v6.6/source/fs/namei.c,"int may_create(struct mnt_idmap *idmap,
			     struct inode *dir, struct dentry *child)
{","c1->d_parent,c1->d_parent,c1->d_parent"
https://elixir.bootlin.com/linux/v6.6/source/fs/coredump.c,"long vma_dump_size(struct vm_area_struct *vma,
				   unsigned long mm_flags)
{",file_inode(vma->vm_file
https://elixir.bootlin.com/linux/v6.6/source/fs/aio.c,"int aio_poll(struct aio_kiocb *aiocb, const struct iocb *iocb)
{",req->cancelled
https://elixir.bootlin.com/linux/v6.6/source/fs/exec.c,"void bprm_fill_uid(struct linux_binprm *bprm, struct file *file)
{",inode->i_mode
https://elixir.bootlin.com/linux/v6.6/source/fs/dcache.c,"int dentry_cmp(const struct dentry *dentry, const unsigned char *ct, unsigned tcount)
{",dentry->d_name.name
https://elixir.bootlin.com/linux/v6.6/source/fs/dcache.c,"void __d_set_inode_and_type(struct dentry *dentry,
					  struct inode *inode,
					  unsigned type_flags)
{",dentry->d_flags
https://elixir.bootlin.com/linux/v6.6/source/fs/dcache.c,"void __d_clear_type_and_inode(struct dentry *dentry)
{",dentry->d_flags
https://elixir.bootlin.com/linux/v6.6/source/fs/dcache.c,"void __dentry_kill(struct dentry *dentry)
{","dentry->d_parent,dentry->d_parent"
https://elixir.bootlin.com/linux/v6.6/source/fs/dcache.c,"bool fast_dput(struct dentry *dentry)
{",dentry->d_flags
https://elixir.bootlin.com/linux/v6.6/source/fs/dcache.c,"void __dget(struct dentry *dentry)
{","dentry->d_parent,dentry->d_parent"
https://elixir.bootlin.com/linux/v6.6/source/fs/dcache.c,"void d_wait_lookup(struct dentry *dentry)
{",parent->d_inode->i_dir_seq
https://elixir.bootlin.com/linux/v6.6/source/fs/inode.c,"ino_t iunique(struct super_block *sb, ino_t max_reserved)
{",inode->i_state
https://elixir.bootlin.com/linux/v6.6/source/fs/inode.c,"void iput_final(struct inode *inode)
{","inode->i_state,inode->i_state,inode->i_state,inode->i_state"
https://elixir.bootlin.com/linux/v6.6/source/fs/eventpoll.c,"bool ep_busy_loop(struct eventpoll *ep, int nonblock)
{",ep->napi_id
https://elixir.bootlin.com/linux/v6.6/source/fs/eventpoll.c,"bool ep_busy_loop(struct eventpoll *ep, int nonblock)
{",ep->napi_id
https://elixir.bootlin.com/linux/v6.6/source/fs/eventpoll.c,"int attach_epitem(struct file *file, struct epitem *epi)
{","file->f_ep,file->f_ep,file->f_ep"
https://elixir.bootlin.com/linux/v6.6/source/fs/ceph/io.c,"void ceph_block_o_direct(struct ceph_inode_info *ci, struct inode *inode)
{",ci->i_ceph_flags
https://elixir.bootlin.com/linux/v6.6/source/fs/ceph/io.c,"void ceph_block_buffered(struct ceph_inode_info *ci, struct inode *inode)
{",ci->i_ceph_flags
https://elixir.bootlin.com/linux/v6.6/source/fs/ceph/file.c,"int try_prep_async_create(struct inode *dir, struct dentry *dentry,
				 struct ceph_file_layout *lo, u64 *pino)
{",di->lease_shared_gen
https://elixir.bootlin.com/linux/v6.6/source/fs/iomap/direct-io.c,"void iomap_dio_bio_end_io(struct bio *bio)
{",iocb->private
https://elixir.bootlin.com/linux/v6.6/source/fs/iomap/direct-io.c,"loff_t iomap_dio_iter(const struct iomap_iter *iter,
		struct iomap_dio *dio)
{",dio->submit.waiter
https://elixir.bootlin.com/linux/v6.6/source/fs/crypto/hooks.c,"int __fscrypt_encrypt_symlink(struct inode *inode, const char *target,
			      unsigned int len, struct fscrypt_str *disk_link)
{","inode->i_link,inode->i_link"
https://elixir.bootlin.com/linux/v6.6/source/fs/btrfs/delayed-inode.c,"void btrfs_init_delayed_node(
				struct btrfs_delayed_node *delayed_node,
				struct btrfs_root *root, u64 inode_id)
{","btrfs_inode->delayed_node,btrfs_inode->delayed_node,btrfs_inode->delayed_node,btrfs_inode->delayed_node"
https://elixir.bootlin.com/linux/v6.6/source/fs/btrfs/delayed-inode.c,"void btrfs_remove_delayed_node(struct btrfs_inode *inode)
{",inode->delayed_node
https://elixir.bootlin.com/linux/v6.6/source/fs/nfs/flexfilelayout/flexfilelayoutdev.c,"bool
ff_layout_init_mirror_ds(struct pnfs_layout_hdr *lo,
			 struct nfs4_ff_layout_mirror *mirror)
{",ds->ds_clp
https://elixir.bootlin.com/linux/v6.6/source/fs/afs/addr_list.c,"int afs_end_cursor(struct afs_addr_cursor *ac)
{","alist->preferred,alist->preferred"
https://elixir.bootlin.com/linux/v6.6/source/fs/afs/inode.c,"void afs_apply_status(struct afs_operation *op,
			     struct afs_vnode_param *vp)
{",inode->i_mode
https://elixir.bootlin.com/linux/v6.6/source/fs/gfs2/util.c,"int gfs2_withdraw(struct gfs2_sbd *sdp)
{","sdp->sd_flags,sdp->sd_flags,sdp->sd_flags,sdp->sd_flags"
https://elixir.bootlin.com/linux/v6.6/source/fs/gfs2/glock.c,"void gfs2_glockfd_seq_show_flock(struct seq_file *seq,
					struct gfs2_glockfd_iter *i)
{",fl_gh->gh_gl
https://elixir.bootlin.com/linux/v6.6/source/fs/ext4/ext4_jbd2.c,"void ext4_check_bdev_write_error(struct super_block *sb)
{",sbi->s_bdev_wb_err
https://elixir.bootlin.com/linux/v6.6/source/fs/ext4/inode.c,"void ext4_update_bh_state(struct buffer_head *bh, unsigned long flags)
{","bh->b_state,bh->b_state"
https://elixir.bootlin.com/linux/v6.6/source/fs/ext4/inode.c,"int mpage_map_and_submit_extent(handle_t *handle,
				       struct mpage_da_data *mpd,
				       bool *give_up_on_write)
{","EXT4_I(inode,EXT4_I(inode,EXT4_I(inode,EXT4_I(inode"
https://elixir.bootlin.com/linux/v6.6/source/fs/ext4/inode.c,"int ext4_do_update_inode(handle_t *handle,
				struct inode *inode,
				struct ext4_iloc *iloc)
{",ei->i_disksize
https://elixir.bootlin.com/linux/v6.6/source/fs/fuse/dev.c,"void fuse_drop_waiting(struct fuse_conn *fc)
{",fc->connected
https://elixir.bootlin.com/linux/v6.6/source/fs/erofs/decompressor_lzma.c,"int z_erofs_load_lzma_config(struct super_block *sb,
			     struct erofs_super_block *dsb,
			     struct z_erofs_lzma_cfgs *lzma, int size)
{","z_erofs_lzma_head,z_erofs_lzma_head,z_erofs_lzma_head,z_erofs_lzma_head"
https://elixir.bootlin.com/linux/v6.6/source/fs/erofs/decompressor_lzma.c,"int z_erofs_lzma_decompress(struct z_erofs_decompress_req *rq,
			    struct page **pagepool)
{","z_erofs_lzma_head,z_erofs_lzma_head,z_erofs_lzma_head,z_erofs_lzma_head"
https://elixir.bootlin.com/linux/v6.6/source/fs/erofs/decompressor_deflate.c,"int z_erofs_deflate_decompress(struct z_erofs_decompress_req *rq,
			       struct page **pagepool)
{","z_erofs_deflate_head,z_erofs_deflate_head,z_erofs_deflate_head,z_erofs_deflate_head"
https://elixir.bootlin.com/linux/v6.6/source/fs/erofs/zdata.c,"bool z_erofs_cache_release_folio(struct folio *folio, gfp_t gfp)
{",pcl->compressed_bvecs[i].page
https://elixir.bootlin.com/linux/v6.6/source/fs/erofs/zdata.c,"int z_erofs_decompress_pcluster(struct z_erofs_decompress_backend *be,
				       int err)
{","pcl->compressed_bvecs[0].page,pcl->compressed_bvecs[i].page"
https://elixir.bootlin.com/linux/v6.6/source/fs/erofs/zdata.c,"void z_erofs_decompress_kickoff(struct z_erofs_decompressqueue *io,
				       int bios)
{","page->mapping,page->mapping"
https://elixir.bootlin.com/linux/v6.6/source/fs/erofs/zdata.c,"void move_to_bypass_jobqueue(struct z_erofs_pcluster *pcl,
				    z_erofs_next_pcluster_t qtail[],
				    z_erofs_next_pcluster_t owned_head)
{",pcl->next
https://elixir.bootlin.com/linux/v6.6/source/fs/erofs/zdata.c,"void z_erofs_submit_queue(struct z_erofs_decompress_frontend *f,
				 struct z_erofs_decompressqueue *fgq,
				 bool *force_fg, bool readahead)
{",pcl->next
https://elixir.bootlin.com/linux/v6.6/source/fs/jbd2/transaction.c,"bool __jbd2_journal_refile_buffer(struct journal_head *jh)
{","jh->b_transaction,jh->b_transaction,jh->b_transaction,jh->b_transaction,jh->b_transaction,jh->b_next_transaction"
https://elixir.bootlin.com/linux/v6.6/source/tools/testing/selftests/bpf/progs/map_kptr.c,"void test_kptr_unref(struct map_value *v)
{",v->unref_ptr
https://elixir.bootlin.com/linux/v6.6/source/tools/testing/selftests/kvm/dirty_log_perf_test.c,"void vcpu_worker(struct memstress_vcpu_args *vcpu_args)
{",iteration
https://elixir.bootlin.com/linux/v6.6/source/tools/testing/selftests/kvm/dirty_log_perf_test.c,"void run_test(enum vm_guest_mode mode, void *arg)
{","vcpu_last_completed_iteration[i],iteration,iteration,iteration,iteration,iteration,iteration,iteration,iteration,iteration,iteration,iteration,iteration,iteration"
https://elixir.bootlin.com/linux/v6.6/source/tools/testing/selftests/kvm/dirty_log_test.c,"void dirty_ring_after_vcpu_run(struct kvm_vcpu *vcpu, int ret, int err)
{",dirty_ring_vcpu_ring_full
https://elixir.bootlin.com/linux/v6.6/source/tools/testing/selftests/kvm/aarch64/arch_timer.c,"void guest_run_stage(struct test_vcpu_shared_data *shared_data,
				enum guest_stage stage)
{",shared_data->nr_iter
https://elixir.bootlin.com/linux/v6.6/source/tools/testing/selftests/rseq/param_test.c,"void this_cpu_list_push(struct percpu_list *list,
			struct percpu_list_node *node,
			int *_cpu)
{","list->c[cpu].head,list->c[cpu].head"
https://elixir.bootlin.com/linux/v6.6/source/tools/testing/selftests/rseq/param_test.c,"bool this_cpu_buffer_push(struct percpu_buffer *buffer,
			  struct percpu_buffer_node *node,
			  int *_cpu)
{","buffer->c[cpu].offset,buffer->c[cpu].offset,buffer->c[cpu].offset,buffer->c[cpu].array[offset - 1]"
https://elixir.bootlin.com/linux/v6.6/source/tools/testing/selftests/rseq/param_test.c,"bool this_cpu_memcpy_buffer_push(struct percpu_memcpy_buffer *buffer,
				 struct percpu_memcpy_buffer_node item,
				 int *_cpu)
{",buffer->c[cpu].offset
https://elixir.bootlin.com/linux/v6.6/source/tools/testing/selftests/rseq/param_test.c,"bool this_cpu_memcpy_buffer_pop(struct percpu_memcpy_buffer *buffer,
				struct percpu_memcpy_buffer_node *item,
				int *_cpu)
{",buffer->c[cpu].offset
https://elixir.bootlin.com/linux/v6.6/source/tools/testing/selftests/rseq/basic_percpu_ops_test.c,"void this_cpu_list_push(struct percpu_list *list,
			struct percpu_list_node *node,
			int *_cpu)
{","list->c[cpu].head,list->c[cpu].head"
https://elixir.bootlin.com/linux/v6.6/source/tools/lib/rbtree.c,"void
__rb_rotate_set_parents(struct rb_node *old, struct rb_node *new,
			struct rb_root *root, int color)
{","node->rb_left,node->rb_left,tmp2->rb_right,parent->rb_left,parent->rb_left,parent->rb_left,gparent->rb_right,gparent->rb_left,parent->rb_right,parent->rb_right,parent->rb_right,sibling->rb_right,sibling->rb_right,sibling->rb_right,sibling->rb_right,tmp2->rb_left,node->rb_right,node->rb_right,sibling->rb_left,sibling->rb_left,sibling->rb_left,sibling->rb_left"
https://elixir.bootlin.com/linux/v6.6/source/tools/lib/bpf/libbpf.c,"int libbpf_num_possible_cpus(void)
{",cpus
https://elixir.bootlin.com/linux/v6.6/source/sound/firewire/isight.c,"void isight_update_pointers(struct isight *isight, unsigned int count)
{",isight->buffer_pointer
https://elixir.bootlin.com/linux/v6.6/source/sound/firewire/amdtp-stream.c,"void update_pcm_pointers(struct amdtp_stream *s,
				struct snd_pcm_substream *pcm,
				unsigned int frames)
{",s->pcm_buffer_pointer
https://elixir.bootlin.com/linux/v6.6/source/sound/core/pcm_lib.c,"void snd_pcm_playback_silence(struct snd_pcm_substream *substream, snd_pcm_uframes_t new_hw_ptr)
{",runtime->control->appl_ptr
https://elixir.bootlin.com/linux/v6.6/source/sound/core/ump.c,"int ump_req_msg(struct snd_ump_endpoint *ump, u32 req1, u32 req2,
		       u32 reply)
{","ump->stream_finished,ump->stream_finished,ump->stream_finished"
